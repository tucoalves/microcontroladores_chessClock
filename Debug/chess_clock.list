
chess_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000401c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08004128  08004128  00005128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041ec  080041ec  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080041ec  080041ec  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080041ec  080041ec  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041ec  080041ec  000051ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041f0  080041f0  000051f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080041f4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  20000068  0800425c  00006068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800425c  000062e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e926  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000238f  00000000  00000000  000149b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  00016d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bcd  00000000  00000000  00017c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018315  00000000  00000000  0001882d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fab1  00000000  00000000  00030b42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ccec  00000000  00000000  000405f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cd2df  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004470  00000000  00000000  000cd324  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d1794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004110 	.word	0x08004110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004110 	.word	0x08004110

0800014c <update_display>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void update_display(){
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
	int p1_minutes = PLAYER_1_TIMER / 60;
 8000152:	4b68      	ldr	r3, [pc, #416]	@ (80002f4 <update_display+0x1a8>)
 8000154:	681b      	ldr	r3, [r3, #0]
 8000156:	4a68      	ldr	r2, [pc, #416]	@ (80002f8 <update_display+0x1ac>)
 8000158:	fb82 1203 	smull	r1, r2, r2, r3
 800015c:	441a      	add	r2, r3
 800015e:	1152      	asrs	r2, r2, #5
 8000160:	17db      	asrs	r3, r3, #31
 8000162:	1ad3      	subs	r3, r2, r3
 8000164:	61fb      	str	r3, [r7, #28]
	int p1_seconds = PLAYER_1_TIMER % 60;
 8000166:	4b63      	ldr	r3, [pc, #396]	@ (80002f4 <update_display+0x1a8>)
 8000168:	681a      	ldr	r2, [r3, #0]
 800016a:	4b63      	ldr	r3, [pc, #396]	@ (80002f8 <update_display+0x1ac>)
 800016c:	fb83 1302 	smull	r1, r3, r3, r2
 8000170:	4413      	add	r3, r2
 8000172:	1159      	asrs	r1, r3, #5
 8000174:	17d3      	asrs	r3, r2, #31
 8000176:	1ac9      	subs	r1, r1, r3
 8000178:	460b      	mov	r3, r1
 800017a:	011b      	lsls	r3, r3, #4
 800017c:	1a5b      	subs	r3, r3, r1
 800017e:	009b      	lsls	r3, r3, #2
 8000180:	1ad3      	subs	r3, r2, r3
 8000182:	61bb      	str	r3, [r7, #24]

	int p2_minutes = PLAYER_2_TIMER / 60;
 8000184:	4b5d      	ldr	r3, [pc, #372]	@ (80002fc <update_display+0x1b0>)
 8000186:	681b      	ldr	r3, [r3, #0]
 8000188:	4a5b      	ldr	r2, [pc, #364]	@ (80002f8 <update_display+0x1ac>)
 800018a:	fb82 1203 	smull	r1, r2, r2, r3
 800018e:	441a      	add	r2, r3
 8000190:	1152      	asrs	r2, r2, #5
 8000192:	17db      	asrs	r3, r3, #31
 8000194:	1ad3      	subs	r3, r2, r3
 8000196:	617b      	str	r3, [r7, #20]
	int p2_seconds = PLAYER_2_TIMER % 60;
 8000198:	4b58      	ldr	r3, [pc, #352]	@ (80002fc <update_display+0x1b0>)
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	4b56      	ldr	r3, [pc, #344]	@ (80002f8 <update_display+0x1ac>)
 800019e:	fb83 1302 	smull	r1, r3, r3, r2
 80001a2:	4413      	add	r3, r2
 80001a4:	1159      	asrs	r1, r3, #5
 80001a6:	17d3      	asrs	r3, r2, #31
 80001a8:	1ac9      	subs	r1, r1, r3
 80001aa:	460b      	mov	r3, r1
 80001ac:	011b      	lsls	r3, r3, #4
 80001ae:	1a5b      	subs	r3, r3, r1
 80001b0:	009b      	lsls	r3, r3, #2
 80001b2:	1ad3      	subs	r3, r2, r3
 80001b4:	613b      	str	r3, [r7, #16]

	const uint8_t digit_to_segment[] = {
 80001b6:	4a52      	ldr	r2, [pc, #328]	@ (8000300 <update_display+0x1b4>)
 80001b8:	1d3b      	adds	r3, r7, #4
 80001ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80001bc:	c303      	stmia	r3!, {r0, r1}
 80001be:	801a      	strh	r2, [r3, #0]
	        MAX7219_SYM_8,
	        MAX7219_SYM_9
	    };

	 // PLAYER 1
	    max7219_SendData(8, digit_to_segment[p1_minutes / 10]);
 80001c0:	69fb      	ldr	r3, [r7, #28]
 80001c2:	4a50      	ldr	r2, [pc, #320]	@ (8000304 <update_display+0x1b8>)
 80001c4:	fb82 1203 	smull	r1, r2, r2, r3
 80001c8:	1092      	asrs	r2, r2, #2
 80001ca:	17db      	asrs	r3, r3, #31
 80001cc:	1ad3      	subs	r3, r2, r3
 80001ce:	3320      	adds	r3, #32
 80001d0:	443b      	add	r3, r7
 80001d2:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80001d6:	4619      	mov	r1, r3
 80001d8:	2008      	movs	r0, #8
 80001da:	f000 ff0f 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(7, digit_to_segment[p1_minutes % 10] | 0x80);  // ponto
 80001de:	69f9      	ldr	r1, [r7, #28]
 80001e0:	4b48      	ldr	r3, [pc, #288]	@ (8000304 <update_display+0x1b8>)
 80001e2:	fb83 2301 	smull	r2, r3, r3, r1
 80001e6:	109a      	asrs	r2, r3, #2
 80001e8:	17cb      	asrs	r3, r1, #31
 80001ea:	1ad2      	subs	r2, r2, r3
 80001ec:	4613      	mov	r3, r2
 80001ee:	009b      	lsls	r3, r3, #2
 80001f0:	4413      	add	r3, r2
 80001f2:	005b      	lsls	r3, r3, #1
 80001f4:	1aca      	subs	r2, r1, r3
 80001f6:	f102 0320 	add.w	r3, r2, #32
 80001fa:	443b      	add	r3, r7
 80001fc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000200:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000204:	b2db      	uxtb	r3, r3
 8000206:	4619      	mov	r1, r3
 8000208:	2007      	movs	r0, #7
 800020a:	f000 fef7 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(6, digit_to_segment[p1_seconds / 10]);
 800020e:	69bb      	ldr	r3, [r7, #24]
 8000210:	4a3c      	ldr	r2, [pc, #240]	@ (8000304 <update_display+0x1b8>)
 8000212:	fb82 1203 	smull	r1, r2, r2, r3
 8000216:	1092      	asrs	r2, r2, #2
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad3      	subs	r3, r2, r3
 800021c:	3320      	adds	r3, #32
 800021e:	443b      	add	r3, r7
 8000220:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000224:	4619      	mov	r1, r3
 8000226:	2006      	movs	r0, #6
 8000228:	f000 fee8 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(5, digit_to_segment[p1_seconds % 10]);
 800022c:	69b9      	ldr	r1, [r7, #24]
 800022e:	4b35      	ldr	r3, [pc, #212]	@ (8000304 <update_display+0x1b8>)
 8000230:	fb83 2301 	smull	r2, r3, r3, r1
 8000234:	109a      	asrs	r2, r3, #2
 8000236:	17cb      	asrs	r3, r1, #31
 8000238:	1ad2      	subs	r2, r2, r3
 800023a:	4613      	mov	r3, r2
 800023c:	009b      	lsls	r3, r3, #2
 800023e:	4413      	add	r3, r2
 8000240:	005b      	lsls	r3, r3, #1
 8000242:	1aca      	subs	r2, r1, r3
 8000244:	f102 0320 	add.w	r3, r2, #32
 8000248:	443b      	add	r3, r7
 800024a:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800024e:	4619      	mov	r1, r3
 8000250:	2005      	movs	r0, #5
 8000252:	f000 fed3 	bl	8000ffc <max7219_SendData>

	    // PLAYER 2
	    max7219_SendData(4, digit_to_segment[p2_minutes / 10]);
 8000256:	697b      	ldr	r3, [r7, #20]
 8000258:	4a2a      	ldr	r2, [pc, #168]	@ (8000304 <update_display+0x1b8>)
 800025a:	fb82 1203 	smull	r1, r2, r2, r3
 800025e:	1092      	asrs	r2, r2, #2
 8000260:	17db      	asrs	r3, r3, #31
 8000262:	1ad3      	subs	r3, r2, r3
 8000264:	3320      	adds	r3, #32
 8000266:	443b      	add	r3, r7
 8000268:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 800026c:	4619      	mov	r1, r3
 800026e:	2004      	movs	r0, #4
 8000270:	f000 fec4 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(3, digit_to_segment[p2_minutes % 10] | 0x80);  // ponto
 8000274:	6979      	ldr	r1, [r7, #20]
 8000276:	4b23      	ldr	r3, [pc, #140]	@ (8000304 <update_display+0x1b8>)
 8000278:	fb83 2301 	smull	r2, r3, r3, r1
 800027c:	109a      	asrs	r2, r3, #2
 800027e:	17cb      	asrs	r3, r1, #31
 8000280:	1ad2      	subs	r2, r2, r3
 8000282:	4613      	mov	r3, r2
 8000284:	009b      	lsls	r3, r3, #2
 8000286:	4413      	add	r3, r2
 8000288:	005b      	lsls	r3, r3, #1
 800028a:	1aca      	subs	r2, r1, r3
 800028c:	f102 0320 	add.w	r3, r2, #32
 8000290:	443b      	add	r3, r7
 8000292:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000296:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800029a:	b2db      	uxtb	r3, r3
 800029c:	4619      	mov	r1, r3
 800029e:	2003      	movs	r0, #3
 80002a0:	f000 feac 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(2, digit_to_segment[p2_seconds / 10]);
 80002a4:	693b      	ldr	r3, [r7, #16]
 80002a6:	4a17      	ldr	r2, [pc, #92]	@ (8000304 <update_display+0x1b8>)
 80002a8:	fb82 1203 	smull	r1, r2, r2, r3
 80002ac:	1092      	asrs	r2, r2, #2
 80002ae:	17db      	asrs	r3, r3, #31
 80002b0:	1ad3      	subs	r3, r2, r3
 80002b2:	3320      	adds	r3, #32
 80002b4:	443b      	add	r3, r7
 80002b6:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002ba:	4619      	mov	r1, r3
 80002bc:	2002      	movs	r0, #2
 80002be:	f000 fe9d 	bl	8000ffc <max7219_SendData>
	    max7219_SendData(1, digit_to_segment[p2_seconds % 10]);
 80002c2:	6939      	ldr	r1, [r7, #16]
 80002c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000304 <update_display+0x1b8>)
 80002c6:	fb83 2301 	smull	r2, r3, r3, r1
 80002ca:	109a      	asrs	r2, r3, #2
 80002cc:	17cb      	asrs	r3, r1, #31
 80002ce:	1ad2      	subs	r2, r2, r3
 80002d0:	4613      	mov	r3, r2
 80002d2:	009b      	lsls	r3, r3, #2
 80002d4:	4413      	add	r3, r2
 80002d6:	005b      	lsls	r3, r3, #1
 80002d8:	1aca      	subs	r2, r1, r3
 80002da:	f102 0320 	add.w	r3, r2, #32
 80002de:	443b      	add	r3, r7
 80002e0:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80002e4:	4619      	mov	r1, r3
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 fe88 	bl	8000ffc <max7219_SendData>
}
 80002ec:	bf00      	nop
 80002ee:	3720      	adds	r7, #32
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000000 	.word	0x20000000
 80002f8:	88888889 	.word	0x88888889
 80002fc:	20000004 	.word	0x20000004
 8000300:	08004128 	.word	0x08004128
 8000304:	66666667 	.word	0x66666667

08000308 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2){
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000318:	d129      	bne.n	800036e <HAL_TIM_PeriodElapsedCallback+0x66>
    	if (!IS_CONFIG_MODE) {
 800031a:	4b17      	ldr	r3, [pc, #92]	@ (8000378 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	b2db      	uxtb	r3, r3
 8000320:	f083 0301 	eor.w	r3, r3, #1
 8000324:	b2db      	uxtb	r3, r3
 8000326:	2b00      	cmp	r3, #0
 8000328:	d021      	beq.n	800036e <HAL_TIM_PeriodElapsedCallback+0x66>
			// Decrementa o timer do player ativo
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800032a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800032e:	4813      	ldr	r0, [pc, #76]	@ (800037c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000330:	f001 fd6b 	bl	8001e0a <HAL_GPIO_TogglePin>
			if(ENABLE_PLAYER_1_TIMER){
 8000334:	4b12      	ldr	r3, [pc, #72]	@ (8000380 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b00      	cmp	r3, #0
 800033a:	d009      	beq.n	8000350 <HAL_TIM_PeriodElapsedCallback+0x48>
				if(PLAYER_1_TIMER >= 1){
 800033c:	4b11      	ldr	r3, [pc, #68]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	dd12      	ble.n	800036a <HAL_TIM_PeriodElapsedCallback+0x62>
					PLAYER_1_TIMER--;
 8000344:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	3b01      	subs	r3, #1
 800034a:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800034c:	6013      	str	r3, [r2, #0]
 800034e:	e00c      	b.n	800036a <HAL_TIM_PeriodElapsedCallback+0x62>
				}
			}
			else if(ENABLE_PLAYER_2_TIMER){
 8000350:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d008      	beq.n	800036a <HAL_TIM_PeriodElapsedCallback+0x62>
				if(PLAYER_2_TIMER >= 1){
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	2b00      	cmp	r3, #0
 800035e:	dd04      	ble.n	800036a <HAL_TIM_PeriodElapsedCallback+0x62>
					PLAYER_2_TIMER--;
 8000360:	4b0a      	ldr	r3, [pc, #40]	@ (800038c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	3b01      	subs	r3, #1
 8000366:	4a09      	ldr	r2, [pc, #36]	@ (800038c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000368:	6013      	str	r3, [r2, #0]
				}
			}
			update_display();
 800036a:	f7ff feef 	bl	800014c <update_display>
		}
    }
}
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
 8000376:	bf00      	nop
 8000378:	2000016f 	.word	0x2000016f
 800037c:	40011000 	.word	0x40011000
 8000380:	2000016d 	.word	0x2000016d
 8000384:	20000000 	.word	0x20000000
 8000388:	2000016e 	.word	0x2000016e
 800038c:	20000004 	.word	0x20000004

08000390 <format_time>:

void format_time(int total_seconds) {
 8000390:	b580      	push	{r7, lr}
 8000392:	b0a0      	sub	sp, #128	@ 0x80
 8000394:	af02      	add	r7, sp, #8
 8000396:	6078      	str	r0, [r7, #4]
    int minutes = total_seconds / 60;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	4a16      	ldr	r2, [pc, #88]	@ (80003f4 <format_time+0x64>)
 800039c:	fb82 1203 	smull	r1, r2, r2, r3
 80003a0:	441a      	add	r2, r3
 80003a2:	1152      	asrs	r2, r2, #5
 80003a4:	17db      	asrs	r3, r3, #31
 80003a6:	1ad3      	subs	r3, r2, r3
 80003a8:	677b      	str	r3, [r7, #116]	@ 0x74
    int seconds = total_seconds % 60;
 80003aa:	687a      	ldr	r2, [r7, #4]
 80003ac:	4b11      	ldr	r3, [pc, #68]	@ (80003f4 <format_time+0x64>)
 80003ae:	fb83 1302 	smull	r1, r3, r3, r2
 80003b2:	4413      	add	r3, r2
 80003b4:	1159      	asrs	r1, r3, #5
 80003b6:	17d3      	asrs	r3, r2, #31
 80003b8:	1ac9      	subs	r1, r1, r3
 80003ba:	460b      	mov	r3, r1
 80003bc:	011b      	lsls	r3, r3, #4
 80003be:	1a5b      	subs	r3, r3, r1
 80003c0:	009b      	lsls	r3, r3, #2
 80003c2:	1ad3      	subs	r3, r2, r3
 80003c4:	673b      	str	r3, [r7, #112]	@ 0x70
    char buffer[100]; // Espaço suficiente para a string formatada

    // Aqui está o erro: você usou "buffer_size" e "length" sem declará-los corretamente.
    int length = snprintf(buffer, sizeof(buffer), "TIME: %02d:%02d\r\n", minutes, seconds);
 80003c6:	f107 0008 	add.w	r0, r7, #8
 80003ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80003cc:	9300      	str	r3, [sp, #0]
 80003ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80003d0:	4a09      	ldr	r2, [pc, #36]	@ (80003f8 <format_time+0x68>)
 80003d2:	2164      	movs	r1, #100	@ 0x64
 80003d4:	f003 f9d8 	bl	8003788 <sniprintf>
 80003d8:	66f8      	str	r0, [r7, #108]	@ 0x6c

    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, length, HAL_MAX_DELAY);
 80003da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80003dc:	b29a      	uxth	r2, r3
 80003de:	f107 0108 	add.w	r1, r7, #8
 80003e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <format_time+0x6c>)
 80003e8:	f002 fffa 	bl	80033e0 <HAL_UART_Transmit>
}
 80003ec:	bf00      	nop
 80003ee:	3778      	adds	r7, #120	@ 0x78
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bd80      	pop	{r7, pc}
 80003f4:	88888889 	.word	0x88888889
 80003f8:	08004134 	.word	0x08004134
 80003fc:	20000124 	.word	0x20000124

08000400 <players_time>:


void players_time(int time_p1, int time_p2) {
 8000400:	b580      	push	{r7, lr}
 8000402:	b0a4      	sub	sp, #144	@ 0x90
 8000404:	af04      	add	r7, sp, #16
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	6039      	str	r1, [r7, #0]
    int p1_minutes = time_p1 / 60;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a23      	ldr	r2, [pc, #140]	@ (800049c <players_time+0x9c>)
 800040e:	fb82 1203 	smull	r1, r2, r2, r3
 8000412:	441a      	add	r2, r3
 8000414:	1152      	asrs	r2, r2, #5
 8000416:	17db      	asrs	r3, r3, #31
 8000418:	1ad3      	subs	r3, r2, r3
 800041a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    int p1_seconds = time_p1 % 60;
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4b1f      	ldr	r3, [pc, #124]	@ (800049c <players_time+0x9c>)
 8000420:	fb83 1302 	smull	r1, r3, r3, r2
 8000424:	4413      	add	r3, r2
 8000426:	1159      	asrs	r1, r3, #5
 8000428:	17d3      	asrs	r3, r2, #31
 800042a:	1ac9      	subs	r1, r1, r3
 800042c:	460b      	mov	r3, r1
 800042e:	011b      	lsls	r3, r3, #4
 8000430:	1a5b      	subs	r3, r3, r1
 8000432:	009b      	lsls	r3, r3, #2
 8000434:	1ad3      	subs	r3, r2, r3
 8000436:	67bb      	str	r3, [r7, #120]	@ 0x78

    int p2_minutes = time_p2 / 60;
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	4a18      	ldr	r2, [pc, #96]	@ (800049c <players_time+0x9c>)
 800043c:	fb82 1203 	smull	r1, r2, r2, r3
 8000440:	441a      	add	r2, r3
 8000442:	1152      	asrs	r2, r2, #5
 8000444:	17db      	asrs	r3, r3, #31
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	677b      	str	r3, [r7, #116]	@ 0x74
    int p2_seconds = time_p2 % 60;
 800044a:	683a      	ldr	r2, [r7, #0]
 800044c:	4b13      	ldr	r3, [pc, #76]	@ (800049c <players_time+0x9c>)
 800044e:	fb83 1302 	smull	r1, r3, r3, r2
 8000452:	4413      	add	r3, r2
 8000454:	1159      	asrs	r1, r3, #5
 8000456:	17d3      	asrs	r3, r2, #31
 8000458:	1ac9      	subs	r1, r1, r3
 800045a:	460b      	mov	r3, r1
 800045c:	011b      	lsls	r3, r3, #4
 800045e:	1a5b      	subs	r3, r3, r1
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	1ad3      	subs	r3, r2, r3
 8000464:	673b      	str	r3, [r7, #112]	@ 0x70
    char buffer[100]; // Espaço suficiente para a string formatada

    // Aqui está o erro: você usou "buffer_size" e "length" sem declará-los corretamente.
    int length = snprintf(buffer, sizeof(buffer), "PLAYER_1: %02d:%02d PLAYER_2: %02d:%02d\r\n", p1_minutes, p1_seconds,p2_minutes, p2_seconds);
 8000466:	f107 0008 	add.w	r0, r7, #8
 800046a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800046c:	9302      	str	r3, [sp, #8]
 800046e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000470:	9301      	str	r3, [sp, #4]
 8000472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000474:	9300      	str	r3, [sp, #0]
 8000476:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000478:	4a09      	ldr	r2, [pc, #36]	@ (80004a0 <players_time+0xa0>)
 800047a:	2164      	movs	r1, #100	@ 0x64
 800047c:	f003 f984 	bl	8003788 <sniprintf>
 8000480:	66f8      	str	r0, [r7, #108]	@ 0x6c
    HAL_UART_Transmit(&huart1, (uint8_t *)buffer, length, HAL_MAX_DELAY);
 8000482:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000484:	b29a      	uxth	r2, r3
 8000486:	f107 0108 	add.w	r1, r7, #8
 800048a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800048e:	4805      	ldr	r0, [pc, #20]	@ (80004a4 <players_time+0xa4>)
 8000490:	f002 ffa6 	bl	80033e0 <HAL_UART_Transmit>
}
 8000494:	bf00      	nop
 8000496:	3780      	adds	r7, #128	@ 0x80
 8000498:	46bd      	mov	sp, r7
 800049a:	bd80      	pop	{r7, pc}
 800049c:	88888889 	.word	0x88888889
 80004a0:	08004148 	.word	0x08004148
 80004a4:	20000124 	.word	0x20000124

080004a8 <buzzer>:


void buzzer() {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09a      	sub	sp, #104	@ 0x68
 80004ac:	af00      	add	r7, sp, #0
      char buffer[100]; // Espaço suficiente para a string formatada
		  int length = snprintf(buffer, sizeof(buffer), "BUZZERRR\r\n");
 80004ae:	463b      	mov	r3, r7
 80004b0:	4a24      	ldr	r2, [pc, #144]	@ (8000544 <buzzer+0x9c>)
 80004b2:	2164      	movs	r1, #100	@ 0x64
 80004b4:	4618      	mov	r0, r3
 80004b6:	f003 f967 	bl	8003788 <sniprintf>
 80004ba:	6678      	str	r0, [r7, #100]	@ 0x64
		  HAL_UART_Transmit(&huart1, (uint8_t *)buffer, length, HAL_MAX_DELAY);
 80004bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80004be:	b29a      	uxth	r2, r3
 80004c0:	4639      	mov	r1, r7
 80004c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004c6:	4820      	ldr	r0, [pc, #128]	@ (8000548 <buzzer+0xa0>)
 80004c8:	f002 ff8a 	bl	80033e0 <HAL_UART_Transmit>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_SET);   // Liga o buzzer
 80004cc:	2201      	movs	r2, #1
 80004ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004d2:	481e      	ldr	r0, [pc, #120]	@ (800054c <buzzer+0xa4>)
 80004d4:	f001 fc81 	bl	8001dda <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80004d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004dc:	f000 ffb0 	bl	8001440 <HAL_Delay>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET); // Desliga o buzzer
 80004e0:	2200      	movs	r2, #0
 80004e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004e6:	4819      	ldr	r0, [pc, #100]	@ (800054c <buzzer+0xa4>)
 80004e8:	f001 fc77 	bl	8001dda <HAL_GPIO_WritePin>
      HAL_Delay(500);
 80004ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80004f0:	f000 ffa6 	bl	8001440 <HAL_Delay>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_SET);   // Liga o buzzer
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80004fa:	4814      	ldr	r0, [pc, #80]	@ (800054c <buzzer+0xa4>)
 80004fc:	f001 fc6d 	bl	8001dda <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000500:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000504:	f000 ff9c 	bl	8001440 <HAL_Delay>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET); // Desliga o buzzer
 8000508:	2200      	movs	r2, #0
 800050a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800050e:	480f      	ldr	r0, [pc, #60]	@ (800054c <buzzer+0xa4>)
 8000510:	f001 fc63 	bl	8001dda <HAL_GPIO_WritePin>
      HAL_Delay(500);
 8000514:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000518:	f000 ff92 	bl	8001440 <HAL_Delay>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_SET);   // Liga o buzzer
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000522:	480a      	ldr	r0, [pc, #40]	@ (800054c <buzzer+0xa4>)
 8000524:	f001 fc59 	bl	8001dda <HAL_GPIO_WritePin>
      HAL_Delay(1000);
 8000528:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800052c:	f000 ff88 	bl	8001440 <HAL_Delay>
      HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET); // Desliga o buzzer
 8000530:	2200      	movs	r2, #0
 8000532:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <buzzer+0xa4>)
 8000538:	f001 fc4f 	bl	8001dda <HAL_GPIO_WritePin>
}
 800053c:	bf00      	nop
 800053e:	3768      	adds	r7, #104	@ 0x68
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08004174 	.word	0x08004174
 8000548:	20000124 	.word	0x20000124
 800054c:	40010c00 	.word	0x40010c00

08000550 <CalculateChecksum>:
{
    return *(uint32_t*)FLASH_USER_START_ADDR;
}


uint32_t CalculateChecksum(AppData_t *data) {
 8000550:	b480      	push	{r7}
 8000552:	b087      	sub	sp, #28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
    uint32_t *ptr = (uint32_t *)data;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	60fb      	str	r3, [r7, #12]
    uint32_t sum = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

    for (int i = 0; i < (sizeof(AppData_t) - sizeof(uint32_t)) / 4; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	e00a      	b.n	800057c <CalculateChecksum+0x2c>
        sum += ptr[i];
 8000566:	693b      	ldr	r3, [r7, #16]
 8000568:	009b      	lsls	r3, r3, #2
 800056a:	68fa      	ldr	r2, [r7, #12]
 800056c:	4413      	add	r3, r2
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	697a      	ldr	r2, [r7, #20]
 8000572:	4413      	add	r3, r2
 8000574:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < (sizeof(AppData_t) - sizeof(uint32_t)) / 4; i++) {
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	3301      	adds	r3, #1
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
 800057e:	2b03      	cmp	r3, #3
 8000580:	d9f1      	bls.n	8000566 <CalculateChecksum+0x16>
    }

    return sum;
 8000582:	697b      	ldr	r3, [r7, #20]
}
 8000584:	4618      	mov	r0, r3
 8000586:	371c      	adds	r7, #28
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
	...

08000590 <SaveAppDataToFlash>:


void SaveAppDataToFlash(AppData_t *data) {
 8000590:	b5b0      	push	{r4, r5, r7, lr}
 8000592:	b08a      	sub	sp, #40	@ 0x28
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 8000598:	f001 f8f4 	bl	8001784 <HAL_FLASH_Unlock>

    // Apaga a página
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]

    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
    eraseInit.PageAddress = FLASH_USER_START_ADDR;
 80005a4:	4b1d      	ldr	r3, [pc, #116]	@ (800061c <SaveAppDataToFlash+0x8c>)
 80005a6:	61bb      	str	r3, [r7, #24]
    eraseInit.NbPages = 1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	61fb      	str	r3, [r7, #28]

    if (HAL_FLASHEx_Erase(&eraseInit, &pageError) != HAL_OK) {
 80005ac:	f107 020c 	add.w	r2, r7, #12
 80005b0:	f107 0310 	add.w	r3, r7, #16
 80005b4:	4611      	mov	r1, r2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f001 f9cc 	bl	8001954 <HAL_FLASHEx_Erase>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d002      	beq.n	80005c8 <SaveAppDataToFlash+0x38>
        HAL_FLASH_Lock();
 80005c2:	f001 f905 	bl	80017d0 <HAL_FLASH_Lock>
 80005c6:	e025      	b.n	8000614 <SaveAppDataToFlash+0x84>
        return;
    }

    // Calcula o checksum
    data->checksum = CalculateChecksum(data);
 80005c8:	6878      	ldr	r0, [r7, #4]
 80005ca:	f7ff ffc1 	bl	8000550 <CalculateChecksum>
 80005ce:	4602      	mov	r2, r0
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	611a      	str	r2, [r3, #16]

    // Grava palavra por palavra (32 bits)
    uint32_t *src = (uint32_t *)data;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	623b      	str	r3, [r7, #32]
    for (uint32_t i = 0; i < sizeof(AppData_t) / 4; i++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	627b      	str	r3, [r7, #36]	@ 0x24
 80005dc:	e015      	b.n	800060a <SaveAppDataToFlash+0x7a>
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_USER_START_ADDR + i * 4, src[i]);
 80005de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005e0:	f103 7300 	add.w	r3, r3, #33554432	@ 0x2000000
 80005e4:	f503 537c 	add.w	r3, r3, #16128	@ 0x3f00
 80005e8:	0099      	lsls	r1, r3, #2
 80005ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ec:	009b      	lsls	r3, r3, #2
 80005ee:	6a3a      	ldr	r2, [r7, #32]
 80005f0:	4413      	add	r3, r2
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2200      	movs	r2, #0
 80005f6:	461c      	mov	r4, r3
 80005f8:	4615      	mov	r5, r2
 80005fa:	4622      	mov	r2, r4
 80005fc:	462b      	mov	r3, r5
 80005fe:	2002      	movs	r0, #2
 8000600:	f001 f850 	bl	80016a4 <HAL_FLASH_Program>
    for (uint32_t i = 0; i < sizeof(AppData_t) / 4; i++) {
 8000604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000606:	3301      	adds	r3, #1
 8000608:	627b      	str	r3, [r7, #36]	@ 0x24
 800060a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800060c:	2b04      	cmp	r3, #4
 800060e:	d9e6      	bls.n	80005de <SaveAppDataToFlash+0x4e>
    }

    HAL_FLASH_Lock();
 8000610:	f001 f8de 	bl	80017d0 <HAL_FLASH_Lock>
}
 8000614:	3728      	adds	r7, #40	@ 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bdb0      	pop	{r4, r5, r7, pc}
 800061a:	bf00      	nop
 800061c:	0800fc00 	.word	0x0800fc00

08000620 <Save>:

void Save(){
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
     AppData_t appData = {
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	605a      	str	r2, [r3, #4]
 800062e:	609a      	str	r2, [r3, #8]
 8000630:	60da      	str	r2, [r3, #12]
 8000632:	611a      	str	r2, [r3, #16]
 8000634:	4b0c      	ldr	r3, [pc, #48]	@ (8000668 <Save+0x48>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b0c      	ldr	r3, [pc, #48]	@ (800066c <Save+0x4c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <Save+0x50>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	4b0b      	ldr	r3, [pc, #44]	@ (8000674 <Save+0x54>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	743b      	strb	r3, [r7, #16]
 800064c:	4b0a      	ldr	r3, [pc, #40]	@ (8000678 <Save+0x58>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	747b      	strb	r3, [r7, #17]
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <Save+0x5c>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	74bb      	strb	r3, [r7, #18]
    .player2_timer = PLAYER_2_TIMER,
    .last_timer = LAST_TIMER,
    .select_minute = SELECT_MINUTE,
    .enable_p1 = ENABLE_PLAYER_1_TIMER,
    .enable_p2 = ENABLE_PLAYER_2_TIMER};
    SaveAppDataToFlash(&appData);
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff98 	bl	8000590 <SaveAppDataToFlash>
}
 8000660:	bf00      	nop
 8000662:	3718      	adds	r7, #24
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000004 	.word	0x20000004
 8000670:	20000008 	.word	0x20000008
 8000674:	2000016c 	.word	0x2000016c
 8000678:	2000016d 	.word	0x2000016d
 800067c:	2000016e 	.word	0x2000016e

08000680 <display_timer_config>:
    // Valida checksum
    uint32_t expected = CalculateChecksum(data);
    return (expected == data->checksum);
}

void display_timer_config() {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
    int minutes = LAST_TIMER / 60;
 8000686:	4b47      	ldr	r3, [pc, #284]	@ (80007a4 <display_timer_config+0x124>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a47      	ldr	r2, [pc, #284]	@ (80007a8 <display_timer_config+0x128>)
 800068c:	fb82 1203 	smull	r1, r2, r2, r3
 8000690:	441a      	add	r2, r3
 8000692:	1152      	asrs	r2, r2, #5
 8000694:	17db      	asrs	r3, r3, #31
 8000696:	1ad3      	subs	r3, r2, r3
 8000698:	613b      	str	r3, [r7, #16]
    int seconds = LAST_TIMER % 60;
 800069a:	4b42      	ldr	r3, [pc, #264]	@ (80007a4 <display_timer_config+0x124>)
 800069c:	681a      	ldr	r2, [r3, #0]
 800069e:	4b42      	ldr	r3, [pc, #264]	@ (80007a8 <display_timer_config+0x128>)
 80006a0:	fb83 1302 	smull	r1, r3, r3, r2
 80006a4:	4413      	add	r3, r2
 80006a6:	1159      	asrs	r1, r3, #5
 80006a8:	17d3      	asrs	r3, r2, #31
 80006aa:	1ac9      	subs	r1, r1, r3
 80006ac:	460b      	mov	r3, r1
 80006ae:	011b      	lsls	r3, r3, #4
 80006b0:	1a5b      	subs	r3, r3, r1
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	1ad3      	subs	r3, r2, r3
 80006b6:	60fb      	str	r3, [r7, #12]

    const uint8_t digit_to_segment[] = {
 80006b8:	4a3c      	ldr	r2, [pc, #240]	@ (80007ac <display_timer_config+0x12c>)
 80006ba:	463b      	mov	r3, r7
 80006bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80006be:	c303      	stmia	r3!, {r0, r1}
 80006c0:	801a      	strh	r2, [r3, #0]
        MAX7219_SYM_7,
        MAX7219_SYM_8,
        MAX7219_SYM_9
    };

    uint8_t min_tens = digit_to_segment[minutes / 10];
 80006c2:	693b      	ldr	r3, [r7, #16]
 80006c4:	4a3a      	ldr	r2, [pc, #232]	@ (80007b0 <display_timer_config+0x130>)
 80006c6:	fb82 1203 	smull	r1, r2, r2, r3
 80006ca:	1092      	asrs	r2, r2, #2
 80006cc:	17db      	asrs	r3, r3, #31
 80006ce:	1ad3      	subs	r3, r2, r3
 80006d0:	3318      	adds	r3, #24
 80006d2:	443b      	add	r3, r7
 80006d4:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80006d8:	72fb      	strb	r3, [r7, #11]
    uint8_t min_units = digit_to_segment[minutes % 10];
 80006da:	6939      	ldr	r1, [r7, #16]
 80006dc:	4b34      	ldr	r3, [pc, #208]	@ (80007b0 <display_timer_config+0x130>)
 80006de:	fb83 2301 	smull	r2, r3, r3, r1
 80006e2:	109a      	asrs	r2, r3, #2
 80006e4:	17cb      	asrs	r3, r1, #31
 80006e6:	1ad2      	subs	r2, r2, r3
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	1aca      	subs	r2, r1, r3
 80006f2:	f102 0318 	add.w	r3, r2, #24
 80006f6:	443b      	add	r3, r7
 80006f8:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80006fc:	75fb      	strb	r3, [r7, #23]
    uint8_t sec_tens = digit_to_segment[seconds / 10];
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <display_timer_config+0x130>)
 8000702:	fb82 1203 	smull	r1, r2, r2, r3
 8000706:	1092      	asrs	r2, r2, #2
 8000708:	17db      	asrs	r3, r3, #31
 800070a:	1ad3      	subs	r3, r2, r3
 800070c:	3318      	adds	r3, #24
 800070e:	443b      	add	r3, r7
 8000710:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000714:	72bb      	strb	r3, [r7, #10]
    uint8_t sec_units = digit_to_segment[seconds % 10];
 8000716:	68f9      	ldr	r1, [r7, #12]
 8000718:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <display_timer_config+0x130>)
 800071a:	fb83 2301 	smull	r2, r3, r3, r1
 800071e:	109a      	asrs	r2, r3, #2
 8000720:	17cb      	asrs	r3, r1, #31
 8000722:	1ad2      	subs	r2, r2, r3
 8000724:	4613      	mov	r3, r2
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	4413      	add	r3, r2
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	1aca      	subs	r2, r1, r3
 800072e:	f102 0318 	add.w	r3, r2, #24
 8000732:	443b      	add	r3, r7
 8000734:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8000738:	75bb      	strb	r3, [r7, #22]

    // Acende o ponto decimal na parte selecionada
    if (SELECT_MINUTE) {
 800073a:	4b1e      	ldr	r3, [pc, #120]	@ (80007b4 <display_timer_config+0x134>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d004      	beq.n	800074c <display_timer_config+0xcc>
        min_units |= 0x80;  // bit 7 acende o ponto decimal
 8000742:	7dfb      	ldrb	r3, [r7, #23]
 8000744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000748:	75fb      	strb	r3, [r7, #23]
 800074a:	e003      	b.n	8000754 <display_timer_config+0xd4>
    } else {
        sec_units |= 0x80;
 800074c:	7dbb      	ldrb	r3, [r7, #22]
 800074e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000752:	75bb      	strb	r3, [r7, #22]
    }

    // Mostra no display do Player 1 (4 dígitos do meio)
    max7219_SendData(8, min_tens);
 8000754:	7afb      	ldrb	r3, [r7, #11]
 8000756:	4619      	mov	r1, r3
 8000758:	2008      	movs	r0, #8
 800075a:	f000 fc4f 	bl	8000ffc <max7219_SendData>
    max7219_SendData(7, min_units);
 800075e:	7dfb      	ldrb	r3, [r7, #23]
 8000760:	4619      	mov	r1, r3
 8000762:	2007      	movs	r0, #7
 8000764:	f000 fc4a 	bl	8000ffc <max7219_SendData>
    max7219_SendData(6, sec_tens);
 8000768:	7abb      	ldrb	r3, [r7, #10]
 800076a:	4619      	mov	r1, r3
 800076c:	2006      	movs	r0, #6
 800076e:	f000 fc45 	bl	8000ffc <max7219_SendData>
    max7219_SendData(5, sec_units);
 8000772:	7dbb      	ldrb	r3, [r7, #22]
 8000774:	4619      	mov	r1, r3
 8000776:	2005      	movs	r0, #5
 8000778:	f000 fc40 	bl	8000ffc <max7219_SendData>

    // Limpa o display do Player 2
    max7219_SendData(4, MAX7219_SYM_BLANK);
 800077c:	2100      	movs	r1, #0
 800077e:	2004      	movs	r0, #4
 8000780:	f000 fc3c 	bl	8000ffc <max7219_SendData>
    max7219_SendData(3, MAX7219_SYM_BLANK);
 8000784:	2100      	movs	r1, #0
 8000786:	2003      	movs	r0, #3
 8000788:	f000 fc38 	bl	8000ffc <max7219_SendData>
    max7219_SendData(2, MAX7219_SYM_BLANK);
 800078c:	2100      	movs	r1, #0
 800078e:	2002      	movs	r0, #2
 8000790:	f000 fc34 	bl	8000ffc <max7219_SendData>
    max7219_SendData(1, MAX7219_SYM_BLANK);
 8000794:	2100      	movs	r1, #0
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fc30 	bl	8000ffc <max7219_SendData>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000008 	.word	0x20000008
 80007a8:	88888889 	.word	0x88888889
 80007ac:	08004128 	.word	0x08004128
 80007b0:	66666667 	.word	0x66666667
 80007b4:	2000016c 	.word	0x2000016c

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b0a0      	sub	sp, #128	@ 0x80
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fddd 	bl	800137c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 fa55 	bl	8000c70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c6:	f000 fb47 	bl	8000e58 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007ca:	f000 facd 	bl	8000d68 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80007ce:	f000 fb19 	bl	8000e04 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80007d2:	f000 fa93 	bl	8000cfc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  max7219_Init();
 80007d6:	f000 fbd7 	bl	8000f88 <max7219_Init>
  max7219_SetIntensivity(7);
 80007da:	2007      	movs	r0, #7
 80007dc:	f000 fbe4 	bl	8000fa8 <max7219_SetIntensivity>
  max7219_TurnOn();
 80007e0:	f000 fc36 	bl	8001050 <max7219_TurnOn>
  update_display();
 80007e4:	f7ff fcb2 	bl	800014c <update_display>


  if (HAL_TIM_Base_Start_IT(&htim2) != HAL_OK)
 80007e8:	489a      	ldr	r0, [pc, #616]	@ (8000a54 <main+0x29c>)
 80007ea:	f002 fa07 	bl	8002bfc <HAL_TIM_Base_Start_IT>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <main+0x40>
    {
      /* Starting Error */
      Error_Handler();
 80007f4:	f000 fbc2 	bl	8000f7c <Error_Handler>

  while (1)
  {
	char buffer[100]; // Enough space for both messages

    players_time(PLAYER_1_TIMER,PLAYER_2_TIMER);
 80007f8:	4b97      	ldr	r3, [pc, #604]	@ (8000a58 <main+0x2a0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a97      	ldr	r2, [pc, #604]	@ (8000a5c <main+0x2a4>)
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4611      	mov	r1, r2
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff fdfc 	bl	8000400 <players_time>

    // JOGADOR 1
    GPIO_PinState current_PT1 = HAL_GPIO_ReadPin(GPIOA, PT_1_Pin);
 8000808:	2101      	movs	r1, #1
 800080a:	4895      	ldr	r0, [pc, #596]	@ (8000a60 <main+0x2a8>)
 800080c:	f001 face 	bl	8001dac <HAL_GPIO_ReadPin>
 8000810:	4603      	mov	r3, r0
 8000812:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
    if (prev_PT1 == GPIO_PIN_RESET && current_PT1 == GPIO_PIN_SET) {
 8000816:	4b93      	ldr	r3, [pc, #588]	@ (8000a64 <main+0x2ac>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d115      	bne.n	800084a <main+0x92>
 800081e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000822:	2b01      	cmp	r3, #1
 8000824:	d111      	bne.n	800084a <main+0x92>
        HAL_Delay(50); // Wait for bouncing to settle
 8000826:	2032      	movs	r0, #50	@ 0x32
 8000828:	f000 fe0a 	bl	8001440 <HAL_Delay>
        if (HAL_GPIO_ReadPin(GPIOA, PT_1_Pin) == GPIO_PIN_SET){
 800082c:	2101      	movs	r1, #1
 800082e:	488c      	ldr	r0, [pc, #560]	@ (8000a60 <main+0x2a8>)
 8000830:	f001 fabc 	bl	8001dac <HAL_GPIO_ReadPin>
 8000834:	4603      	mov	r3, r0
 8000836:	2b01      	cmp	r3, #1
 8000838:	d107      	bne.n	800084a <main+0x92>
          ENABLE_PLAYER_1_TIMER = false;
 800083a:	4b8b      	ldr	r3, [pc, #556]	@ (8000a68 <main+0x2b0>)
 800083c:	2200      	movs	r2, #0
 800083e:	701a      	strb	r2, [r3, #0]
          ENABLE_PLAYER_2_TIMER = true;
 8000840:	4b8a      	ldr	r3, [pc, #552]	@ (8000a6c <main+0x2b4>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
          Save();
 8000846:	f7ff feeb 	bl	8000620 <Save>
        }
    }
    prev_PT1 = current_PT1;
 800084a:	4a86      	ldr	r2, [pc, #536]	@ (8000a64 <main+0x2ac>)
 800084c:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8000850:	7013      	strb	r3, [r2, #0]

    // JOGADOR 2
    GPIO_PinState current_PT2 = HAL_GPIO_ReadPin(GPIOA, PT_2_Pin);
 8000852:	2102      	movs	r1, #2
 8000854:	4882      	ldr	r0, [pc, #520]	@ (8000a60 <main+0x2a8>)
 8000856:	f001 faa9 	bl	8001dac <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
    if (prev_PT2 == GPIO_PIN_RESET && current_PT2 == GPIO_PIN_SET)
 8000860:	4b83      	ldr	r3, [pc, #524]	@ (8000a70 <main+0x2b8>)
 8000862:	781b      	ldrb	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d115      	bne.n	8000894 <main+0xdc>
 8000868:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800086c:	2b01      	cmp	r3, #1
 800086e:	d111      	bne.n	8000894 <main+0xdc>
	  	  {
	  	      HAL_Delay(50); // Wait for bouncing to settle
 8000870:	2032      	movs	r0, #50	@ 0x32
 8000872:	f000 fde5 	bl	8001440 <HAL_Delay>
	  	      if (HAL_GPIO_ReadPin(GPIOA, PT_2_Pin) == GPIO_PIN_SET)
 8000876:	2102      	movs	r1, #2
 8000878:	4879      	ldr	r0, [pc, #484]	@ (8000a60 <main+0x2a8>)
 800087a:	f001 fa97 	bl	8001dac <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b01      	cmp	r3, #1
 8000882:	d107      	bne.n	8000894 <main+0xdc>
	  	      {
	  	    	  ENABLE_PLAYER_1_TIMER = true;
 8000884:	4b78      	ldr	r3, [pc, #480]	@ (8000a68 <main+0x2b0>)
 8000886:	2201      	movs	r2, #1
 8000888:	701a      	strb	r2, [r3, #0]
	  	    	  ENABLE_PLAYER_2_TIMER = false;
 800088a:	4b78      	ldr	r3, [pc, #480]	@ (8000a6c <main+0x2b4>)
 800088c:	2200      	movs	r2, #0
 800088e:	701a      	strb	r2, [r3, #0]
	  	    	  Save();
 8000890:	f7ff fec6 	bl	8000620 <Save>
	  	      }
	  	  }

    prev_PT2 = current_PT2;
 8000894:	4a76      	ldr	r2, [pc, #472]	@ (8000a70 <main+0x2b8>)
 8000896:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800089a:	7013      	strb	r3, [r2, #0]

    // CONFIG
    GPIO_PinState current_CONF_SALVAR;
    GPIO_PinState current_CONF = HAL_GPIO_ReadPin(GPIOA, CONF_Pin);
 800089c:	2104      	movs	r1, #4
 800089e:	4870      	ldr	r0, [pc, #448]	@ (8000a60 <main+0x2a8>)
 80008a0:	f001 fa84 	bl	8001dac <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        if (prev_CONF == GPIO_PIN_RESET && current_CONF == GPIO_PIN_SET)
 80008aa:	4b72      	ldr	r3, [pc, #456]	@ (8000a74 <main+0x2bc>)
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	f040 8179 	bne.w	8000ba6 <main+0x3ee>
 80008b4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	f040 8174 	bne.w	8000ba6 <main+0x3ee>
        {
            HAL_Delay(50);
 80008be:	2032      	movs	r0, #50	@ 0x32
 80008c0:	f000 fdbe 	bl	8001440 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, CONF_Pin) == GPIO_PIN_SET)
 80008c4:	2104      	movs	r1, #4
 80008c6:	4866      	ldr	r0, [pc, #408]	@ (8000a60 <main+0x2a8>)
 80008c8:	f001 fa70 	bl	8001dac <HAL_GPIO_ReadPin>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	f040 8169 	bne.w	8000ba6 <main+0x3ee>
            {
                int length = snprintf(buffer, sizeof(buffer), "CONFIG\r\n");
 80008d4:	463b      	mov	r3, r7
 80008d6:	4a68      	ldr	r2, [pc, #416]	@ (8000a78 <main+0x2c0>)
 80008d8:	2164      	movs	r1, #100	@ 0x64
 80008da:	4618      	mov	r0, r3
 80008dc:	f002 ff54 	bl	8003788 <sniprintf>
 80008e0:	66f8      	str	r0, [r7, #108]	@ 0x6c
                HAL_UART_Transmit(&huart1, (uint8_t *)buffer, length, HAL_MAX_DELAY);
 80008e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4639      	mov	r1, r7
 80008e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008ec:	4863      	ldr	r0, [pc, #396]	@ (8000a7c <main+0x2c4>)
 80008ee:	f002 fd77 	bl	80033e0 <HAL_UART_Transmit>

                ENABLE_PLAYER_1_TIMER = false;
 80008f2:	4b5d      	ldr	r3, [pc, #372]	@ (8000a68 <main+0x2b0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
                ENABLE_PLAYER_2_TIMER = false;
 80008f8:	4b5c      	ldr	r3, [pc, #368]	@ (8000a6c <main+0x2b4>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	701a      	strb	r2, [r3, #0]

                int pressed = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	67bb      	str	r3, [r7, #120]	@ 0x78
                IS_CONFIG_MODE = true;
 8000902:	4b5f      	ldr	r3, [pc, #380]	@ (8000a80 <main+0x2c8>)
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
                while (pressed == 0)
 8000908:	e146      	b.n	8000b98 <main+0x3e0>
                {
                    format_time(LAST_TIMER);
 800090a:	4b5e      	ldr	r3, [pc, #376]	@ (8000a84 <main+0x2cc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fd3e 	bl	8000390 <format_time>
                    display_timer_config();
 8000914:	f7ff feb4 	bl	8000680 <display_timer_config>

                    // SEL - Alternar entre minutos e segundos
                    GPIO_PinState current_SEL = HAL_GPIO_ReadPin(GPIOA, SEL_Pin);
 8000918:	2108      	movs	r1, #8
 800091a:	4851      	ldr	r0, [pc, #324]	@ (8000a60 <main+0x2a8>)
 800091c:	f001 fa46 	bl	8001dac <HAL_GPIO_ReadPin>
 8000920:	4603      	mov	r3, r0
 8000922:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                    if (prev_SEL == GPIO_PIN_RESET && current_SEL == GPIO_PIN_SET)
 8000926:	4b58      	ldr	r3, [pc, #352]	@ (8000a88 <main+0x2d0>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d11e      	bne.n	800096c <main+0x1b4>
 800092e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000932:	2b01      	cmp	r3, #1
 8000934:	d11a      	bne.n	800096c <main+0x1b4>
                    {
                        HAL_Delay(50);
 8000936:	2032      	movs	r0, #50	@ 0x32
 8000938:	f000 fd82 	bl	8001440 <HAL_Delay>
                        if (HAL_GPIO_ReadPin(GPIOA, SEL_Pin) == GPIO_PIN_SET)
 800093c:	2108      	movs	r1, #8
 800093e:	4848      	ldr	r0, [pc, #288]	@ (8000a60 <main+0x2a8>)
 8000940:	f001 fa34 	bl	8001dac <HAL_GPIO_ReadPin>
 8000944:	4603      	mov	r3, r0
 8000946:	2b01      	cmp	r3, #1
 8000948:	d110      	bne.n	800096c <main+0x1b4>
                        {
                            SELECT_MINUTE = !SELECT_MINUTE;
 800094a:	4b50      	ldr	r3, [pc, #320]	@ (8000a8c <main+0x2d4>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	bf14      	ite	ne
 8000952:	2301      	movne	r3, #1
 8000954:	2300      	moveq	r3, #0
 8000956:	b2db      	uxtb	r3, r3
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	b2da      	uxtb	r2, r3
 8000964:	4b49      	ldr	r3, [pc, #292]	@ (8000a8c <main+0x2d4>)
 8000966:	701a      	strb	r2, [r3, #0]
                            Save();
 8000968:	f7ff fe5a 	bl	8000620 <Save>
                        }
                    }
                    prev_SEL = current_SEL;
 800096c:	4a46      	ldr	r2, [pc, #280]	@ (8000a88 <main+0x2d0>)
 800096e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8000972:	7013      	strb	r3, [r2, #0]

                    // INC - Incrementar tempo
                    GPIO_PinState current_INC = HAL_GPIO_ReadPin(GPIOA, INC_Pin);
 8000974:	2110      	movs	r1, #16
 8000976:	483a      	ldr	r0, [pc, #232]	@ (8000a60 <main+0x2a8>)
 8000978:	f001 fa18 	bl	8001dac <HAL_GPIO_ReadPin>
 800097c:	4603      	mov	r3, r0
 800097e:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
                    if (prev_INC == GPIO_PIN_RESET && current_INC == GPIO_PIN_SET)
 8000982:	4b43      	ldr	r3, [pc, #268]	@ (8000a90 <main+0x2d8>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d12a      	bne.n	80009e0 <main+0x228>
 800098a:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 800098e:	2b01      	cmp	r3, #1
 8000990:	d126      	bne.n	80009e0 <main+0x228>
                    {
                        HAL_Delay(50);
 8000992:	2032      	movs	r0, #50	@ 0x32
 8000994:	f000 fd54 	bl	8001440 <HAL_Delay>
                        if (HAL_GPIO_ReadPin(GPIOA, INC_Pin) == GPIO_PIN_SET)
 8000998:	2110      	movs	r1, #16
 800099a:	4831      	ldr	r0, [pc, #196]	@ (8000a60 <main+0x2a8>)
 800099c:	f001 fa06 	bl	8001dac <HAL_GPIO_ReadPin>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b01      	cmp	r3, #1
 80009a4:	d11a      	bne.n	80009dc <main+0x224>
                        {
                            if (SELECT_MINUTE)
 80009a6:	4b39      	ldr	r3, [pc, #228]	@ (8000a8c <main+0x2d4>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d00b      	beq.n	80009c6 <main+0x20e>
                            {
                                if (LAST_TIMER < 59 * 60)
 80009ae:	4b35      	ldr	r3, [pc, #212]	@ (8000a84 <main+0x2cc>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f640 52d3 	movw	r2, #3539	@ 0xdd3
 80009b6:	4293      	cmp	r3, r2
 80009b8:	dc10      	bgt.n	80009dc <main+0x224>
                                    LAST_TIMER += 60;
 80009ba:	4b32      	ldr	r3, [pc, #200]	@ (8000a84 <main+0x2cc>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	333c      	adds	r3, #60	@ 0x3c
 80009c0:	4a30      	ldr	r2, [pc, #192]	@ (8000a84 <main+0x2cc>)
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e00a      	b.n	80009dc <main+0x224>
                            }
                            else
                            {
                                if (LAST_TIMER < (59 * 60) + 59)
 80009c6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a84 <main+0x2cc>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f640 620e 	movw	r2, #3598	@ 0xe0e
 80009ce:	4293      	cmp	r3, r2
 80009d0:	dc04      	bgt.n	80009dc <main+0x224>
                                    LAST_TIMER += 1;
 80009d2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a84 <main+0x2cc>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3301      	adds	r3, #1
 80009d8:	4a2a      	ldr	r2, [pc, #168]	@ (8000a84 <main+0x2cc>)
 80009da:	6013      	str	r3, [r2, #0]
                            }
                        }
                        Save();
 80009dc:	f7ff fe20 	bl	8000620 <Save>
                    }
                    prev_INC = current_INC;
 80009e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a90 <main+0x2d8>)
 80009e2:	f897 306a 	ldrb.w	r3, [r7, #106]	@ 0x6a
 80009e6:	7013      	strb	r3, [r2, #0]

                    // DEC - Decrementar tempo
                    GPIO_PinState current_DEC = HAL_GPIO_ReadPin(GPIOA, DEC_Pin);
 80009e8:	2120      	movs	r1, #32
 80009ea:	481d      	ldr	r0, [pc, #116]	@ (8000a60 <main+0x2a8>)
 80009ec:	f001 f9de 	bl	8001dac <HAL_GPIO_ReadPin>
 80009f0:	4603      	mov	r3, r0
 80009f2:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                    if (prev_DEC == GPIO_PIN_RESET && current_DEC == GPIO_PIN_SET)
 80009f6:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <main+0x2dc>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d151      	bne.n	8000aa2 <main+0x2ea>
 80009fe:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d14d      	bne.n	8000aa2 <main+0x2ea>
                    {
                        HAL_Delay(50);
 8000a06:	2032      	movs	r0, #50	@ 0x32
 8000a08:	f000 fd1a 	bl	8001440 <HAL_Delay>
                        if (HAL_GPIO_ReadPin(GPIOA, DEC_Pin) == GPIO_PIN_SET)
 8000a0c:	2120      	movs	r1, #32
 8000a0e:	4814      	ldr	r0, [pc, #80]	@ (8000a60 <main+0x2a8>)
 8000a10:	f001 f9cc 	bl	8001dac <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d143      	bne.n	8000aa2 <main+0x2ea>
                        {
                            if (SELECT_MINUTE)
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a8c <main+0x2d4>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00d      	beq.n	8000a3e <main+0x286>
                            {
                                if (LAST_TIMER >= 60)
 8000a22:	4b18      	ldr	r3, [pc, #96]	@ (8000a84 <main+0x2cc>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b3b      	cmp	r3, #59	@ 0x3b
 8000a28:	dd05      	ble.n	8000a36 <main+0x27e>
                                    LAST_TIMER -= 60;
 8000a2a:	4b16      	ldr	r3, [pc, #88]	@ (8000a84 <main+0x2cc>)
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	3b3c      	subs	r3, #60	@ 0x3c
 8000a30:	4a14      	ldr	r2, [pc, #80]	@ (8000a84 <main+0x2cc>)
 8000a32:	6013      	str	r3, [r2, #0]
 8000a34:	e033      	b.n	8000a9e <main+0x2e6>
                                else
                                    LAST_TIMER = 10;
 8000a36:	4b13      	ldr	r3, [pc, #76]	@ (8000a84 <main+0x2cc>)
 8000a38:	220a      	movs	r2, #10
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e02f      	b.n	8000a9e <main+0x2e6>
                            }
                            else
                            {
                                if (LAST_TIMER > 10)
 8000a3e:	4b11      	ldr	r3, [pc, #68]	@ (8000a84 <main+0x2cc>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b0a      	cmp	r3, #10
 8000a44:	dd28      	ble.n	8000a98 <main+0x2e0>
                                    LAST_TIMER -= 1;
 8000a46:	4b0f      	ldr	r3, [pc, #60]	@ (8000a84 <main+0x2cc>)
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a84 <main+0x2cc>)
 8000a4e:	6013      	str	r3, [r2, #0]
 8000a50:	e025      	b.n	8000a9e <main+0x2e6>
 8000a52:	bf00      	nop
 8000a54:	200000dc 	.word	0x200000dc
 8000a58:	20000000 	.word	0x20000000
 8000a5c:	20000004 	.word	0x20000004
 8000a60:	40010800 	.word	0x40010800
 8000a64:	20000170 	.word	0x20000170
 8000a68:	2000016d 	.word	0x2000016d
 8000a6c:	2000016e 	.word	0x2000016e
 8000a70:	20000171 	.word	0x20000171
 8000a74:	20000172 	.word	0x20000172
 8000a78:	08004180 	.word	0x08004180
 8000a7c:	20000124 	.word	0x20000124
 8000a80:	2000016f 	.word	0x2000016f
 8000a84:	20000008 	.word	0x20000008
 8000a88:	20000174 	.word	0x20000174
 8000a8c:	2000016c 	.word	0x2000016c
 8000a90:	20000175 	.word	0x20000175
 8000a94:	20000176 	.word	0x20000176
                                else
                                    LAST_TIMER = 10;
 8000a98:	4b69      	ldr	r3, [pc, #420]	@ (8000c40 <main+0x488>)
 8000a9a:	220a      	movs	r2, #10
 8000a9c:	601a      	str	r2, [r3, #0]
                            }
                            Save();
 8000a9e:	f7ff fdbf 	bl	8000620 <Save>
                        }
                    }
                    prev_DEC = current_DEC;
 8000aa2:	4a68      	ldr	r2, [pc, #416]	@ (8000c44 <main+0x48c>)
 8000aa4:	f897 3069 	ldrb.w	r3, [r7, #105]	@ 0x69
 8000aa8:	7013      	strb	r3, [r2, #0]

                    // CONF - Confirmar configuração e sair do menu
                    GPIO_PinState current_CONF_SALVAR = HAL_GPIO_ReadPin(GPIOA, CONF_Pin);
 8000aaa:	2104      	movs	r1, #4
 8000aac:	4866      	ldr	r0, [pc, #408]	@ (8000c48 <main+0x490>)
 8000aae:	f001 f97d 	bl	8001dac <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    if (prev_CONF_SALVAR == GPIO_PIN_RESET && current_CONF_SALVAR == GPIO_PIN_SET)
 8000ab8:	4b64      	ldr	r3, [pc, #400]	@ (8000c4c <main+0x494>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d119      	bne.n	8000af4 <main+0x33c>
 8000ac0:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000ac4:	2b01      	cmp	r3, #1
 8000ac6:	d115      	bne.n	8000af4 <main+0x33c>
                    {
                        HAL_Delay(50);
 8000ac8:	2032      	movs	r0, #50	@ 0x32
 8000aca:	f000 fcb9 	bl	8001440 <HAL_Delay>
                        if (HAL_GPIO_ReadPin(GPIOA, CONF_Pin) == GPIO_PIN_SET)
 8000ace:	2104      	movs	r1, #4
 8000ad0:	485d      	ldr	r0, [pc, #372]	@ (8000c48 <main+0x490>)
 8000ad2:	f001 f96b 	bl	8001dac <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b01      	cmp	r3, #1
 8000ada:	d10b      	bne.n	8000af4 <main+0x33c>
                        {
                            PLAYER_1_TIMER = LAST_TIMER;
 8000adc:	4b58      	ldr	r3, [pc, #352]	@ (8000c40 <main+0x488>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a5b      	ldr	r2, [pc, #364]	@ (8000c50 <main+0x498>)
 8000ae2:	6013      	str	r3, [r2, #0]
                            PLAYER_2_TIMER = LAST_TIMER;
 8000ae4:	4b56      	ldr	r3, [pc, #344]	@ (8000c40 <main+0x488>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a5a      	ldr	r2, [pc, #360]	@ (8000c54 <main+0x49c>)
 8000aea:	6013      	str	r3, [r2, #0]
                            Save();
 8000aec:	f7ff fd98 	bl	8000620 <Save>
                            pressed = 1;
 8000af0:	2301      	movs	r3, #1
 8000af2:	67bb      	str	r3, [r7, #120]	@ 0x78
                        }
                    }
                    prev_CONF_SALVAR = current_CONF_SALVAR;
 8000af4:	4a55      	ldr	r2, [pc, #340]	@ (8000c4c <main+0x494>)
 8000af6:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8000afa:	7013      	strb	r3, [r2, #0]



                        // JOGADOR 1
                        GPIO_PinState current_PT1 = HAL_GPIO_ReadPin(GPIOA, PT_1_Pin);
 8000afc:	2101      	movs	r1, #1
 8000afe:	4852      	ldr	r0, [pc, #328]	@ (8000c48 <main+0x490>)
 8000b00:	f001 f954 	bl	8001dac <HAL_GPIO_ReadPin>
 8000b04:	4603      	mov	r3, r0
 8000b06:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
                        if (prev_PT1 == GPIO_PIN_RESET && current_PT1 == GPIO_PIN_SET) {
 8000b0a:	4b53      	ldr	r3, [pc, #332]	@ (8000c58 <main+0x4a0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d117      	bne.n	8000b42 <main+0x38a>
 8000b12:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d113      	bne.n	8000b42 <main+0x38a>
                            HAL_Delay(50); // Wait for bouncing to settle
 8000b1a:	2032      	movs	r0, #50	@ 0x32
 8000b1c:	f000 fc90 	bl	8001440 <HAL_Delay>
                            if (HAL_GPIO_ReadPin(GPIOA, PT_1_Pin) == GPIO_PIN_SET){
 8000b20:	2101      	movs	r1, #1
 8000b22:	4849      	ldr	r0, [pc, #292]	@ (8000c48 <main+0x490>)
 8000b24:	f001 f942 	bl	8001dac <HAL_GPIO_ReadPin>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d109      	bne.n	8000b42 <main+0x38a>
                              ENABLE_PLAYER_1_TIMER = false;
 8000b2e:	4b4b      	ldr	r3, [pc, #300]	@ (8000c5c <main+0x4a4>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	701a      	strb	r2, [r3, #0]
                              ENABLE_PLAYER_2_TIMER = true;
 8000b34:	4b4a      	ldr	r3, [pc, #296]	@ (8000c60 <main+0x4a8>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	701a      	strb	r2, [r3, #0]
                              Save();
 8000b3a:	f7ff fd71 	bl	8000620 <Save>
                              pressed = 1;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	67bb      	str	r3, [r7, #120]	@ 0x78
                            }
                        }
                        prev_PT1 = current_PT1;
 8000b42:	4a45      	ldr	r2, [pc, #276]	@ (8000c58 <main+0x4a0>)
 8000b44:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000b48:	7013      	strb	r3, [r2, #0]

                        // JOGADOR 2
                        GPIO_PinState current_PT2 = HAL_GPIO_ReadPin(GPIOA, PT_2_Pin);
 8000b4a:	2102      	movs	r1, #2
 8000b4c:	483e      	ldr	r0, [pc, #248]	@ (8000c48 <main+0x490>)
 8000b4e:	f001 f92d 	bl	8001dac <HAL_GPIO_ReadPin>
 8000b52:	4603      	mov	r3, r0
 8000b54:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
                        if (prev_PT2 == GPIO_PIN_RESET && current_PT2 == GPIO_PIN_SET)
 8000b58:	4b42      	ldr	r3, [pc, #264]	@ (8000c64 <main+0x4ac>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d117      	bne.n	8000b90 <main+0x3d8>
 8000b60:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000b64:	2b01      	cmp	r3, #1
 8000b66:	d113      	bne.n	8000b90 <main+0x3d8>
                            {
                                HAL_Delay(50); // Wait for bouncing to settle
 8000b68:	2032      	movs	r0, #50	@ 0x32
 8000b6a:	f000 fc69 	bl	8001440 <HAL_Delay>
                                if (HAL_GPIO_ReadPin(GPIOA, PT_2_Pin) == GPIO_PIN_SET)
 8000b6e:	2102      	movs	r1, #2
 8000b70:	4835      	ldr	r0, [pc, #212]	@ (8000c48 <main+0x490>)
 8000b72:	f001 f91b 	bl	8001dac <HAL_GPIO_ReadPin>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d109      	bne.n	8000b90 <main+0x3d8>
                                {
                                  ENABLE_PLAYER_1_TIMER = true;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	@ (8000c5c <main+0x4a4>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	701a      	strb	r2, [r3, #0]
                                  ENABLE_PLAYER_2_TIMER = false;
 8000b82:	4b37      	ldr	r3, [pc, #220]	@ (8000c60 <main+0x4a8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
                                  Save();
 8000b88:	f7ff fd4a 	bl	8000620 <Save>
                                  pressed = 1;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	67bb      	str	r3, [r7, #120]	@ 0x78
                                }
                            }

                        prev_PT2 = current_PT2;
 8000b90:	4a34      	ldr	r2, [pc, #208]	@ (8000c64 <main+0x4ac>)
 8000b92:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8000b96:	7013      	strb	r3, [r2, #0]
                while (pressed == 0)
 8000b98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f43f aeb5 	beq.w	800090a <main+0x152>
                }
                IS_CONFIG_MODE = false;
 8000ba0:	4b31      	ldr	r3, [pc, #196]	@ (8000c68 <main+0x4b0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	701a      	strb	r2, [r3, #0]
            }
        }
    prev_CONF = current_CONF;
 8000ba6:	4a31      	ldr	r2, [pc, #196]	@ (8000c6c <main+0x4b4>)
 8000ba8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000bac:	7013      	strb	r3, [r2, #0]


    // TEMPO ESGOTADO
	  if (PLAYER_1_TIMER == 0 || PLAYER_2_TIMER == 0)
 8000bae:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <main+0x498>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d004      	beq.n	8000bc0 <main+0x408>
 8000bb6:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <main+0x49c>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f47f ae1c 	bne.w	80007f8 <main+0x40>
	  {


      players_time(PLAYER_1_TIMER,PLAYER_2_TIMER);
 8000bc0:	4b23      	ldr	r3, [pc, #140]	@ (8000c50 <main+0x498>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a23      	ldr	r2, [pc, #140]	@ (8000c54 <main+0x49c>)
 8000bc6:	6812      	ldr	r2, [r2, #0]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fc18 	bl	8000400 <players_time>
      buzzer();
 8000bd0:	f7ff fc6a 	bl	80004a8 <buzzer>

      int pressed = 0;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	677b      	str	r3, [r7, #116]	@ 0x74
        while (pressed == 0)
 8000bd8:	e02a      	b.n	8000c30 <main+0x478>
        {
          current_CONF = HAL_GPIO_ReadPin(GPIOA, CONF_Pin);
 8000bda:	2104      	movs	r1, #4
 8000bdc:	481a      	ldr	r0, [pc, #104]	@ (8000c48 <main+0x490>)
 8000bde:	f001 f8e5 	bl	8001dac <HAL_GPIO_ReadPin>
 8000be2:	4603      	mov	r3, r0
 8000be4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
          if (prev_CONF == GPIO_PIN_RESET && current_CONF == GPIO_PIN_SET)
 8000be8:	4b20      	ldr	r3, [pc, #128]	@ (8000c6c <main+0x4b4>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d11f      	bne.n	8000c30 <main+0x478>
 8000bf0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d11b      	bne.n	8000c30 <main+0x478>
            {
            HAL_Delay(50);
 8000bf8:	2032      	movs	r0, #50	@ 0x32
 8000bfa:	f000 fc21 	bl	8001440 <HAL_Delay>
            if (HAL_GPIO_ReadPin(GPIOA, CONF_Pin) == GPIO_PIN_SET)
 8000bfe:	2104      	movs	r1, #4
 8000c00:	4811      	ldr	r0, [pc, #68]	@ (8000c48 <main+0x490>)
 8000c02:	f001 f8d3 	bl	8001dac <HAL_GPIO_ReadPin>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d111      	bne.n	8000c30 <main+0x478>
            {
            ENABLE_PLAYER_1_TIMER = false;
 8000c0c:	4b13      	ldr	r3, [pc, #76]	@ (8000c5c <main+0x4a4>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
            ENABLE_PLAYER_2_TIMER = false;
 8000c12:	4b13      	ldr	r3, [pc, #76]	@ (8000c60 <main+0x4a8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	701a      	strb	r2, [r3, #0]
            PLAYER_1_TIMER = LAST_TIMER;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <main+0x488>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <main+0x498>)
 8000c1e:	6013      	str	r3, [r2, #0]
            PLAYER_2_TIMER = LAST_TIMER;
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <main+0x488>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0b      	ldr	r2, [pc, #44]	@ (8000c54 <main+0x49c>)
 8000c26:	6013      	str	r3, [r2, #0]
            Save();
 8000c28:	f7ff fcfa 	bl	8000620 <Save>
            pressed = 1;
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	677b      	str	r3, [r7, #116]	@ 0x74
        while (pressed == 0)
 8000c30:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0d1      	beq.n	8000bda <main+0x422>
            }}
          }
          prev_CONF = current_CONF;
 8000c36:	4a0d      	ldr	r2, [pc, #52]	@ (8000c6c <main+0x4b4>)
 8000c38:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8000c3c:	7013      	strb	r3, [r2, #0]
  {
 8000c3e:	e5db      	b.n	80007f8 <main+0x40>
 8000c40:	20000008 	.word	0x20000008
 8000c44:	20000176 	.word	0x20000176
 8000c48:	40010800 	.word	0x40010800
 8000c4c:	20000173 	.word	0x20000173
 8000c50:	20000000 	.word	0x20000000
 8000c54:	20000004 	.word	0x20000004
 8000c58:	20000170 	.word	0x20000170
 8000c5c:	2000016d 	.word	0x2000016d
 8000c60:	2000016e 	.word	0x2000016e
 8000c64:	20000171 	.word	0x20000171
 8000c68:	2000016f 	.word	0x2000016f
 8000c6c:	20000172 	.word	0x20000172

08000c70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b090      	sub	sp, #64	@ 0x40
 8000c74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	2228      	movs	r2, #40	@ 0x28
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f002 fdb8 	bl	80037f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c84:	1d3b      	adds	r3, r7, #4
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c92:	2301      	movs	r3, #1
 8000c94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c96:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f001 f8bf 	bl	8001e3c <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000cc4:	f000 f95a 	bl	8000f7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cd8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2102      	movs	r1, #2
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f001 fb2c 	bl	8002340 <HAL_RCC_ClockConfig>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000cee:	f000 f945 	bl	8000f7c <Error_Handler>
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	3740      	adds	r7, #64	@ 0x40
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
	...

08000cfc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d00:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <MX_SPI2_Init+0x68>)
 8000d04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d06:	4b16      	ldr	r3, [pc, #88]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d08:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000d0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d0e:	4b14      	ldr	r3, [pc, #80]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d14:	4b12      	ldr	r3, [pc, #72]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d1a:	4b11      	ldr	r3, [pc, #68]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d26:	4b0e      	ldr	r3, [pc, #56]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d2c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d30:	2218      	movs	r2, #24
 8000d32:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d34:	4b0a      	ldr	r3, [pc, #40]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d3a:	4b09      	ldr	r3, [pc, #36]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d46:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d48:	220a      	movs	r2, #10
 8000d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d4c:	4804      	ldr	r0, [pc, #16]	@ (8000d60 <MX_SPI2_Init+0x64>)
 8000d4e:	f001 fc85 	bl	800265c <HAL_SPI_Init>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d001      	beq.n	8000d5c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d58:	f000 f910 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000084 	.word	0x20000084
 8000d64:	40003800 	.word	0x40003800

08000d68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6e:	f107 0308 	add.w	r3, r7, #8
 8000d72:	2200      	movs	r2, #0
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	605a      	str	r2, [r3, #4]
 8000d78:	609a      	str	r2, [r3, #8]
 8000d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d84:	4b1e      	ldr	r3, [pc, #120]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 8000d8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d8e:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8000d92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000d9c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000da0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da2:	4b17      	ldr	r3, [pc, #92]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da8:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dae:	4814      	ldr	r0, [pc, #80]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000db0:	f001 fed5 	bl	8002b5e <HAL_TIM_Base_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000dba:	f000 f8df 	bl	8000f7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dbe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dc2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc4:	f107 0308 	add.w	r3, r7, #8
 8000dc8:	4619      	mov	r1, r3
 8000dca:	480d      	ldr	r0, [pc, #52]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000dcc:	f002 f858 	bl	8002e80 <HAL_TIM_ConfigClockSource>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000dd6:	f000 f8d1 	bl	8000f7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4806      	ldr	r0, [pc, #24]	@ (8000e00 <MX_TIM2_Init+0x98>)
 8000de8:	f002 fa3a 	bl	8003260 <HAL_TIMEx_MasterConfigSynchronization>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000df2:	f000 f8c3 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000dc 	.word	0x200000dc

08000e04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e08:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e0a:	4a12      	ldr	r2, [pc, #72]	@ (8000e54 <MX_USART1_UART_Init+0x50>)
 8000e0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e0e:	4b10      	ldr	r3, [pc, #64]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e16:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e22:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e28:	4b09      	ldr	r3, [pc, #36]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e2a:	220c      	movs	r2, #12
 8000e2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2e:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e34:	4b06      	ldr	r3, [pc, #24]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3a:	4805      	ldr	r0, [pc, #20]	@ (8000e50 <MX_USART1_UART_Init+0x4c>)
 8000e3c:	f002 fa80 	bl	8003340 <HAL_UART_Init>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e46:	f000 f899 	bl	8000f7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000124 	.word	0x20000124
 8000e54:	40013800 	.word	0x40013800

08000e58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
 8000e6a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6c:	4b3f      	ldr	r3, [pc, #252]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e6e:	699b      	ldr	r3, [r3, #24]
 8000e70:	4a3e      	ldr	r2, [pc, #248]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6193      	str	r3, [r2, #24]
 8000e78:	4b3c      	ldr	r3, [pc, #240]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e7a:	699b      	ldr	r3, [r3, #24]
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e84:	4b39      	ldr	r3, [pc, #228]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	4a38      	ldr	r2, [pc, #224]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e8a:	f043 0320 	orr.w	r3, r3, #32
 8000e8e:	6193      	str	r3, [r2, #24]
 8000e90:	4b36      	ldr	r3, [pc, #216]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e92:	699b      	ldr	r3, [r3, #24]
 8000e94:	f003 0320 	and.w	r3, r3, #32
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e9c:	4b33      	ldr	r3, [pc, #204]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000e9e:	699b      	ldr	r3, [r3, #24]
 8000ea0:	4a32      	ldr	r2, [pc, #200]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000ea2:	f043 0304 	orr.w	r3, r3, #4
 8000ea6:	6193      	str	r3, [r2, #24]
 8000ea8:	4b30      	ldr	r3, [pc, #192]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eaa:	699b      	ldr	r3, [r3, #24]
 8000eac:	f003 0304 	and.w	r3, r3, #4
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eb6:	699b      	ldr	r3, [r3, #24]
 8000eb8:	4a2c      	ldr	r2, [pc, #176]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000eba:	f043 0308 	orr.w	r3, r3, #8
 8000ebe:	6193      	str	r3, [r2, #24]
 8000ec0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f6c <MX_GPIO_Init+0x114>)
 8000ec2:	699b      	ldr	r3, [r3, #24]
 8000ec4:	f003 0308 	and.w	r3, r3, #8
 8000ec8:	603b      	str	r3, [r7, #0]
 8000eca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ed2:	4827      	ldr	r0, [pc, #156]	@ (8000f70 <MX_GPIO_Init+0x118>)
 8000ed4:	f000 ff81 	bl	8001dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZ_GPIO_Port, BUZ_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ede:	4825      	ldr	r0, [pc, #148]	@ (8000f74 <MX_GPIO_Init+0x11c>)
 8000ee0:	f000 ff7b 	bl	8001dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, GPIO_PIN_RESET);
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eea:	4823      	ldr	r0, [pc, #140]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000eec:	f000 ff75 	bl	8001dda <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000ef0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ef4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	4619      	mov	r1, r3
 8000f08:	4819      	ldr	r0, [pc, #100]	@ (8000f70 <MX_GPIO_Init+0x118>)
 8000f0a:	f000 fdcb 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PT_1_Pin PT_2_Pin CONF_Pin SEL_Pin
                           INC_Pin DEC_Pin */
  GPIO_InitStruct.Pin = PT_1_Pin|PT_2_Pin|CONF_Pin|SEL_Pin
 8000f0e:	233f      	movs	r3, #63	@ 0x3f
 8000f10:	613b      	str	r3, [r7, #16]
                          |INC_Pin|DEC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000f16:	2302      	movs	r3, #2
 8000f18:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4815      	ldr	r0, [pc, #84]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000f22:	f000 fdbf 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZ_Pin */
  GPIO_InitStruct.Pin = BUZ_Pin;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2302      	movs	r3, #2
 8000f36:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZ_GPIO_Port, &GPIO_InitStruct);
 8000f38:	f107 0310 	add.w	r3, r7, #16
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	480d      	ldr	r0, [pc, #52]	@ (8000f74 <MX_GPIO_Init+0x11c>)
 8000f40:	f000 fdb0 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4806      	ldr	r0, [pc, #24]	@ (8000f78 <MX_GPIO_Init+0x120>)
 8000f5e:	f000 fda1 	bl	8001aa4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f62:	bf00      	nop
 8000f64:	3720      	adds	r7, #32
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	40011000 	.word	0x40011000
 8000f74:	40010c00 	.word	0x40010c00
 8000f78:	40010800 	.word	0x40010800

08000f7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f80:	b672      	cpsid	i
}
 8000f82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f84:	bf00      	nop
 8000f86:	e7fd      	b.n	8000f84 <Error_Handler+0x8>

08000f88 <max7219_Init>:
    REG_SCAN_LIMIT      = 0x0B,
    REG_SHUTDOWN        = 0x0C,
    REG_DISPLAY_TEST    = 0x0F,
} MAX7219_REGISTERS;

void max7219_Init() {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
    max7219_TurnOff();
 8000f8c:	f000 f868 	bl	8001060 <max7219_TurnOff>
    max7219_SendData(REG_SCAN_LIMIT, NUMBER_OF_DIGITS - 1);
 8000f90:	2107      	movs	r1, #7
 8000f92:	200b      	movs	r0, #11
 8000f94:	f000 f832 	bl	8000ffc <max7219_SendData>
    max7219_SendData(REG_DECODE_MODE, 0x00); // decode off
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2009      	movs	r0, #9
 8000f9c:	f000 f82e 	bl	8000ffc <max7219_SendData>
    max7219_Clean();
 8000fa0:	f000 f814 	bl	8000fcc <max7219_Clean>
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <max7219_SetIntensivity>:

void max7219_SetIntensivity(uint8_t intensivity) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
    if (intensivity > 0x0F)
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2b0f      	cmp	r3, #15
 8000fb6:	d805      	bhi.n	8000fc4 <max7219_SetIntensivity+0x1c>
        return;

    max7219_SendData(REG_INTENSITY, intensivity);
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f000 f81d 	bl	8000ffc <max7219_SendData>
 8000fc2:	e000      	b.n	8000fc6 <max7219_SetIntensivity+0x1e>
        return;
 8000fc4:	bf00      	nop
}
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <max7219_Clean>:

void max7219_Clean() {
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
    for (int i = 1; i < 9; i++)
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	e008      	b.n	8000fea <max7219_Clean+0x1e>
        max7219_SendData(i, MAX7219_SYM_BLANK);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	b2db      	uxtb	r3, r3
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f000 f80c 	bl	8000ffc <max7219_SendData>
    for (int i = 1; i < 9; i++)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	ddf3      	ble.n	8000fd8 <max7219_Clean+0xc>
}
 8000ff0:	bf00      	nop
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <max7219_SendData>:

void max7219_SendData(uint8_t addr, uint8_t data) {
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	460a      	mov	r2, r1
 8001006:	71fb      	strb	r3, [r7, #7]
 8001008:	4613      	mov	r3, r2
 800100a:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 800100c:	2200      	movs	r2, #0
 800100e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <max7219_SendData+0x4c>)
 8001014:	f000 fee1 	bl	8001dda <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi2, &addr, 1, HAL_MAX_DELAY);
 8001018:	1df9      	adds	r1, r7, #7
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800101e:	2201      	movs	r2, #1
 8001020:	480a      	ldr	r0, [pc, #40]	@ (800104c <max7219_SendData+0x50>)
 8001022:	f001 fb9f 	bl	8002764 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi2, &data, 1, HAL_MAX_DELAY);
 8001026:	1db9      	adds	r1, r7, #6
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	2201      	movs	r2, #1
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <max7219_SendData+0x50>)
 8001030:	f001 fb98 	bl	8002764 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8001034:	2201      	movs	r2, #1
 8001036:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800103a:	4803      	ldr	r0, [pc, #12]	@ (8001048 <max7219_SendData+0x4c>)
 800103c:	f000 fecd 	bl	8001dda <HAL_GPIO_WritePin>
}
 8001040:	bf00      	nop
 8001042:	3708      	adds	r7, #8
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40010800 	.word	0x40010800
 800104c:	20000084 	.word	0x20000084

08001050 <max7219_TurnOn>:

void max7219_TurnOn(void) {
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
    max7219_SendData(REG_SHUTDOWN, 0x01);
 8001054:	2101      	movs	r1, #1
 8001056:	200c      	movs	r0, #12
 8001058:	f7ff ffd0 	bl	8000ffc <max7219_SendData>
}
 800105c:	bf00      	nop
 800105e:	bd80      	pop	{r7, pc}

08001060 <max7219_TurnOff>:

void max7219_TurnOff(void) {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
    max7219_SendData(REG_SHUTDOWN, 0x00);
 8001064:	2100      	movs	r1, #0
 8001066:	200c      	movs	r0, #12
 8001068:	f7ff ffc8 	bl	8000ffc <max7219_SendData>
}
 800106c:	bf00      	nop
 800106e:	bd80      	pop	{r7, pc}

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <HAL_MspInit+0x5c>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	4a14      	ldr	r2, [pc, #80]	@ (80010cc <HAL_MspInit+0x5c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <HAL_MspInit+0x5c>)
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60bb      	str	r3, [r7, #8]
 800108c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0f      	ldr	r3, [pc, #60]	@ (80010cc <HAL_MspInit+0x5c>)
 8001090:	69db      	ldr	r3, [r3, #28]
 8001092:	4a0e      	ldr	r2, [pc, #56]	@ (80010cc <HAL_MspInit+0x5c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001098:	61d3      	str	r3, [r2, #28]
 800109a:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <HAL_MspInit+0x5c>)
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a2:	607b      	str	r3, [r7, #4]
 80010a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_MspInit+0x60>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4a04      	ldr	r2, [pc, #16]	@ (80010d0 <HAL_MspInit+0x60>)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c2:	bf00      	nop
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bc80      	pop	{r7}
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000

080010d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001160 <HAL_SPI_MspInit+0x8c>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d131      	bne.n	8001158 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	4a1a      	ldr	r2, [pc, #104]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010fe:	61d3      	str	r3, [r2, #28]
 8001100:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 8001102:	69db      	ldr	r3, [r3, #28]
 8001104:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800110c:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a14      	ldr	r2, [pc, #80]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 8001112:	f043 0308 	orr.w	r3, r3, #8
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b12      	ldr	r3, [pc, #72]	@ (8001164 <HAL_SPI_MspInit+0x90>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001124:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001128:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4619      	mov	r1, r3
 8001138:	480b      	ldr	r0, [pc, #44]	@ (8001168 <HAL_SPI_MspInit+0x94>)
 800113a:	f000 fcb3 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800113e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001142:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0310 	add.w	r3, r7, #16
 8001150:	4619      	mov	r1, r3
 8001152:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_SPI_MspInit+0x94>)
 8001154:	f000 fca6 	bl	8001aa4 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001158:	bf00      	nop
 800115a:	3720      	adds	r7, #32
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	40003800 	.word	0x40003800
 8001164:	40021000 	.word	0x40021000
 8001168:	40010c00 	.word	0x40010c00

0800116c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117c:	d113      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	61d3      	str	r3, [r2, #28]
 800118a:	4b09      	ldr	r3, [pc, #36]	@ (80011b0 <HAL_TIM_Base_MspInit+0x44>)
 800118c:	69db      	ldr	r3, [r3, #28]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	201c      	movs	r0, #28
 800119c:	f000 fa4b 	bl	8001636 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011a0:	201c      	movs	r0, #28
 80011a2:	f000 fa64 	bl	800166e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40021000 	.word	0x40021000

080011b4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001240 <HAL_UART_MspInit+0x8c>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d131      	bne.n	8001238 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011d6:	699b      	ldr	r3, [r3, #24]
 80011d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011de:	6193      	str	r3, [r2, #24]
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011f2:	f043 0304 	orr.w	r3, r3, #4
 80011f6:	6193      	str	r3, [r2, #24]
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <HAL_UART_MspInit+0x90>)
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	f003 0304 	and.w	r3, r3, #4
 8001200:	60bb      	str	r3, [r7, #8]
 8001202:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001204:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001208:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	4619      	mov	r1, r3
 8001218:	480b      	ldr	r0, [pc, #44]	@ (8001248 <HAL_UART_MspInit+0x94>)
 800121a:	f000 fc43 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800121e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001222:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001228:	2300      	movs	r3, #0
 800122a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122c:	f107 0310 	add.w	r3, r7, #16
 8001230:	4619      	mov	r1, r3
 8001232:	4805      	ldr	r0, [pc, #20]	@ (8001248 <HAL_UART_MspInit+0x94>)
 8001234:	f000 fc36 	bl	8001aa4 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001238:	bf00      	nop
 800123a:	3720      	adds	r7, #32
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40013800 	.word	0x40013800
 8001244:	40021000 	.word	0x40021000
 8001248:	40010800 	.word	0x40010800

0800124c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <NMI_Handler+0x4>

08001254 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <HardFault_Handler+0x4>

0800125c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <MemManage_Handler+0x4>

08001264 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <BusFault_Handler+0x4>

0800126c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <UsageFault_Handler+0x4>

08001274 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001284:	bf00      	nop
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr

0800128c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800129c:	f000 f8b4 	bl	8001408 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a8:	4802      	ldr	r0, [pc, #8]	@ (80012b4 <TIM2_IRQHandler+0x10>)
 80012aa:	f001 fcf9 	bl	8002ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	200000dc 	.word	0x200000dc

080012b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b086      	sub	sp, #24
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c0:	4a14      	ldr	r2, [pc, #80]	@ (8001314 <_sbrk+0x5c>)
 80012c2:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <_sbrk+0x60>)
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012cc:	4b13      	ldr	r3, [pc, #76]	@ (800131c <_sbrk+0x64>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d102      	bne.n	80012da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d4:	4b11      	ldr	r3, [pc, #68]	@ (800131c <_sbrk+0x64>)
 80012d6:	4a12      	ldr	r2, [pc, #72]	@ (8001320 <_sbrk+0x68>)
 80012d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012da:	4b10      	ldr	r3, [pc, #64]	@ (800131c <_sbrk+0x64>)
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4413      	add	r3, r2
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d207      	bcs.n	80012f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e8:	f002 fa8c 	bl	8003804 <__errno>
 80012ec:	4603      	mov	r3, r0
 80012ee:	220c      	movs	r2, #12
 80012f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f6:	e009      	b.n	800130c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f8:	4b08      	ldr	r3, [pc, #32]	@ (800131c <_sbrk+0x64>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fe:	4b07      	ldr	r3, [pc, #28]	@ (800131c <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	4a05      	ldr	r2, [pc, #20]	@ (800131c <_sbrk+0x64>)
 8001308:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3718      	adds	r7, #24
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20005000 	.word	0x20005000
 8001318:	00000400 	.word	0x00000400
 800131c:	20000178 	.word	0x20000178
 8001320:	200002e8 	.word	0x200002e8

08001324 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001328:	bf00      	nop
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr

08001330 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001330:	f7ff fff8 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001334:	480b      	ldr	r0, [pc, #44]	@ (8001364 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001336:	490c      	ldr	r1, [pc, #48]	@ (8001368 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001338:	4a0c      	ldr	r2, [pc, #48]	@ (800136c <LoopFillZerobss+0x16>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800134c:	4c09      	ldr	r4, [pc, #36]	@ (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800135a:	f002 fa59 	bl	8003810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135e:	f7ff fa2b 	bl	80007b8 <main>
  bx lr
 8001362:	4770      	bx	lr
  ldr r0, =_sdata
 8001364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001368:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 800136c:	080041f4 	.word	0x080041f4
  ldr r2, =_sbss
 8001370:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001374:	200002e8 	.word	0x200002e8

08001378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_2_IRQHandler>
	...

0800137c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001380:	4b08      	ldr	r3, [pc, #32]	@ (80013a4 <HAL_Init+0x28>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <HAL_Init+0x28>)
 8001386:	f043 0310 	orr.w	r3, r3, #16
 800138a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800138c:	2003      	movs	r0, #3
 800138e:	f000 f947 	bl	8001620 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001392:	200f      	movs	r0, #15
 8001394:	f000 f808 	bl	80013a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001398:	f7ff fe6a 	bl	8001070 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40022000 	.word	0x40022000

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b0:	4b12      	ldr	r3, [pc, #72]	@ (80013fc <HAL_InitTick+0x54>)
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	4b12      	ldr	r3, [pc, #72]	@ (8001400 <HAL_InitTick+0x58>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	4619      	mov	r1, r3
 80013ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013be:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f95f 	bl	800168a <HAL_SYSTICK_Config>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00e      	b.n	80013f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b0f      	cmp	r3, #15
 80013da:	d80a      	bhi.n	80013f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013dc:	2200      	movs	r2, #0
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013e4:	f000 f927 	bl	8001636 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e8:	4a06      	ldr	r2, [pc, #24]	@ (8001404 <HAL_InitTick+0x5c>)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ee:	2300      	movs	r3, #0
 80013f0:	e000      	b.n	80013f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	3708      	adds	r7, #8
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	2000000c 	.word	0x2000000c
 8001400:	20000014 	.word	0x20000014
 8001404:	20000010 	.word	0x20000010

08001408 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <HAL_IncTick+0x1c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	461a      	mov	r2, r3
 8001412:	4b05      	ldr	r3, [pc, #20]	@ (8001428 <HAL_IncTick+0x20>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4413      	add	r3, r2
 8001418:	4a03      	ldr	r2, [pc, #12]	@ (8001428 <HAL_IncTick+0x20>)
 800141a:	6013      	str	r3, [r2, #0]
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr
 8001424:	20000014 	.word	0x20000014
 8001428:	2000017c 	.word	0x2000017c

0800142c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b02      	ldr	r3, [pc, #8]	@ (800143c <HAL_GetTick+0x10>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr
 800143c:	2000017c 	.word	0x2000017c

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff fff0 	bl	800142c <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffe0 	bl	800142c <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000014 	.word	0x20000014

08001488 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001498:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014a4:	4013      	ands	r3, r2
 80014a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80014b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <__NVIC_SetPriorityGrouping+0x44>)
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	60d3      	str	r3, [r2, #12]
}
 80014c0:	bf00      	nop
 80014c2:	3714      	adds	r7, #20
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d4:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <__NVIC_GetPriorityGrouping+0x18>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	0a1b      	lsrs	r3, r3, #8
 80014da:	f003 0307 	and.w	r3, r3, #7
}
 80014de:	4618      	mov	r0, r3
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db0b      	blt.n	8001516 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fe:	79fb      	ldrb	r3, [r7, #7]
 8001500:	f003 021f 	and.w	r2, r3, #31
 8001504:	4906      	ldr	r1, [pc, #24]	@ (8001520 <__NVIC_EnableIRQ+0x34>)
 8001506:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150a:	095b      	lsrs	r3, r3, #5
 800150c:	2001      	movs	r0, #1
 800150e:	fa00 f202 	lsl.w	r2, r0, r2
 8001512:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	@ (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	@ (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	bc80      	pop	{r7}
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	@ 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	@ 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bc80      	pop	{r7}
 80015da:	4770      	bx	lr

080015dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	3b01      	subs	r3, #1
 80015e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015ec:	d301      	bcc.n	80015f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ee:	2301      	movs	r3, #1
 80015f0:	e00f      	b.n	8001612 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <SysTick_Config+0x40>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3b01      	subs	r3, #1
 80015f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015fa:	210f      	movs	r1, #15
 80015fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001600:	f7ff ff90 	bl	8001524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001604:	4b05      	ldr	r3, [pc, #20]	@ (800161c <SysTick_Config+0x40>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800160a:	4b04      	ldr	r3, [pc, #16]	@ (800161c <SysTick_Config+0x40>)
 800160c:	2207      	movs	r2, #7
 800160e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	e000e010 	.word	0xe000e010

08001620 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f7ff ff2d 	bl	8001488 <__NVIC_SetPriorityGrouping>
}
 800162e:	bf00      	nop
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}

08001636 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001636:	b580      	push	{r7, lr}
 8001638:	b086      	sub	sp, #24
 800163a:	af00      	add	r7, sp, #0
 800163c:	4603      	mov	r3, r0
 800163e:	60b9      	str	r1, [r7, #8]
 8001640:	607a      	str	r2, [r7, #4]
 8001642:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001644:	2300      	movs	r3, #0
 8001646:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001648:	f7ff ff42 	bl	80014d0 <__NVIC_GetPriorityGrouping>
 800164c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	68b9      	ldr	r1, [r7, #8]
 8001652:	6978      	ldr	r0, [r7, #20]
 8001654:	f7ff ff90 	bl	8001578 <NVIC_EncodePriority>
 8001658:	4602      	mov	r2, r0
 800165a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800165e:	4611      	mov	r1, r2
 8001660:	4618      	mov	r0, r3
 8001662:	f7ff ff5f 	bl	8001524 <__NVIC_SetPriority>
}
 8001666:	bf00      	nop
 8001668:	3718      	adds	r7, #24
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b082      	sub	sp, #8
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff35 	bl	80014ec <__NVIC_EnableIRQ>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800168a:	b580      	push	{r7, lr}
 800168c:	b082      	sub	sp, #8
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ffa2 	bl	80015dc <SysTick_Config>
 8001698:	4603      	mov	r3, r0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
	...

080016a4 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b087      	sub	sp, #28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	60b9      	str	r1, [r7, #8]
 80016ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016be:	4b2f      	ldr	r3, [pc, #188]	@ (800177c <HAL_FLASH_Program+0xd8>)
 80016c0:	7e1b      	ldrb	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d101      	bne.n	80016ca <HAL_FLASH_Program+0x26>
 80016c6:	2302      	movs	r3, #2
 80016c8:	e054      	b.n	8001774 <HAL_FLASH_Program+0xd0>
 80016ca:	4b2c      	ldr	r3, [pc, #176]	@ (800177c <HAL_FLASH_Program+0xd8>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80016d0:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80016d4:	f000 f8a8 	bl	8001828 <FLASH_WaitForLastOperation>
 80016d8:	4603      	mov	r3, r0
 80016da:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 80016dc:	7dfb      	ldrb	r3, [r7, #23]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d144      	bne.n	800176c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d102      	bne.n	80016ee <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80016e8:	2301      	movs	r3, #1
 80016ea:	757b      	strb	r3, [r7, #21]
 80016ec:	e007      	b.n	80016fe <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d102      	bne.n	80016fa <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80016f4:	2302      	movs	r3, #2
 80016f6:	757b      	strb	r3, [r7, #21]
 80016f8:	e001      	b.n	80016fe <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80016fa:	2304      	movs	r3, #4
 80016fc:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 80016fe:	2300      	movs	r3, #0
 8001700:	75bb      	strb	r3, [r7, #22]
 8001702:	e02d      	b.n	8001760 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001704:	7dbb      	ldrb	r3, [r7, #22]
 8001706:	005a      	lsls	r2, r3, #1
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	eb02 0c03 	add.w	ip, r2, r3
 800170e:	7dbb      	ldrb	r3, [r7, #22]
 8001710:	0119      	lsls	r1, r3, #4
 8001712:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001716:	f1c1 0620 	rsb	r6, r1, #32
 800171a:	f1a1 0020 	sub.w	r0, r1, #32
 800171e:	fa22 f401 	lsr.w	r4, r2, r1
 8001722:	fa03 f606 	lsl.w	r6, r3, r6
 8001726:	4334      	orrs	r4, r6
 8001728:	fa23 f000 	lsr.w	r0, r3, r0
 800172c:	4304      	orrs	r4, r0
 800172e:	fa23 f501 	lsr.w	r5, r3, r1
 8001732:	b2a3      	uxth	r3, r4
 8001734:	4619      	mov	r1, r3
 8001736:	4660      	mov	r0, ip
 8001738:	f000 f85a 	bl	80017f0 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800173c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001740:	f000 f872 	bl	8001828 <FLASH_WaitForLastOperation>
 8001744:	4603      	mov	r3, r0
 8001746:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8001748:	4b0d      	ldr	r3, [pc, #52]	@ (8001780 <HAL_FLASH_Program+0xdc>)
 800174a:	691b      	ldr	r3, [r3, #16]
 800174c:	4a0c      	ldr	r2, [pc, #48]	@ (8001780 <HAL_FLASH_Program+0xdc>)
 800174e:	f023 0301 	bic.w	r3, r3, #1
 8001752:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001754:	7dfb      	ldrb	r3, [r7, #23]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d107      	bne.n	800176a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800175a:	7dbb      	ldrb	r3, [r7, #22]
 800175c:	3301      	adds	r3, #1
 800175e:	75bb      	strb	r3, [r7, #22]
 8001760:	7dba      	ldrb	r2, [r7, #22]
 8001762:	7d7b      	ldrb	r3, [r7, #21]
 8001764:	429a      	cmp	r2, r3
 8001766:	d3cd      	bcc.n	8001704 <HAL_FLASH_Program+0x60>
 8001768:	e000      	b.n	800176c <HAL_FLASH_Program+0xc8>
      {
        break;
 800176a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800176c:	4b03      	ldr	r3, [pc, #12]	@ (800177c <HAL_FLASH_Program+0xd8>)
 800176e:	2200      	movs	r2, #0
 8001770:	761a      	strb	r2, [r3, #24]

  return status;
 8001772:	7dfb      	ldrb	r3, [r7, #23]
}
 8001774:	4618      	mov	r0, r3
 8001776:	371c      	adds	r7, #28
 8001778:	46bd      	mov	sp, r7
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800177c:	20000180 	.word	0x20000180
 8001780:	40022000 	.word	0x40022000

08001784 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800178a:	2300      	movs	r3, #0
 800178c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_FLASH_Unlock+0x40>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00d      	beq.n	80017b6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800179a:	4b0a      	ldr	r3, [pc, #40]	@ (80017c4 <HAL_FLASH_Unlock+0x40>)
 800179c:	4a0a      	ldr	r2, [pc, #40]	@ (80017c8 <HAL_FLASH_Unlock+0x44>)
 800179e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80017a0:	4b08      	ldr	r3, [pc, #32]	@ (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_FLASH_Unlock+0x48>)
 80017a4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80017a6:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <HAL_FLASH_Unlock+0x40>)
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80017b6:	79fb      	ldrb	r3, [r7, #7]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40022000 	.word	0x40022000
 80017c8:	45670123 	.word	0x45670123
 80017cc:	cdef89ab 	.word	0xcdef89ab

080017d0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80017d4:	4b05      	ldr	r3, [pc, #20]	@ (80017ec <HAL_FLASH_Lock+0x1c>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a04      	ldr	r2, [pc, #16]	@ (80017ec <HAL_FLASH_Lock+0x1c>)
 80017da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017de:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40022000 	.word	0x40022000

080017f0 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
 80017f8:	460b      	mov	r3, r1
 80017fa:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80017fc:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <FLASH_Program_HalfWord+0x30>)
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001802:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <FLASH_Program_HalfWord+0x34>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	4a07      	ldr	r2, [pc, #28]	@ (8001824 <FLASH_Program_HalfWord+0x34>)
 8001808:	f043 0301 	orr.w	r3, r3, #1
 800180c:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	887a      	ldrh	r2, [r7, #2]
 8001812:	801a      	strh	r2, [r3, #0]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	20000180 	.word	0x20000180
 8001824:	40022000 	.word	0x40022000

08001828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fdfc 	bl	800142c <HAL_GetTick>
 8001834:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001836:	e010      	b.n	800185a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800183e:	d00c      	beq.n	800185a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <FLASH_WaitForLastOperation+0x2e>
 8001846:	f7ff fdf1 	bl	800142c <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d201      	bcs.n	800185a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e025      	b.n	80018a6 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1e8      	bne.n	8001838 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001866:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001868:	68db      	ldr	r3, [r3, #12]
 800186a:	f003 0320 	and.w	r3, r3, #32
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001872:	4b0f      	ldr	r3, [pc, #60]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001874:	2220      	movs	r2, #32
 8001876:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001878:	4b0d      	ldr	r3, [pc, #52]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f003 0310 	and.w	r3, r3, #16
 8001880:	2b00      	cmp	r3, #0
 8001882:	d10b      	bne.n	800189c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001884:	4b0a      	ldr	r3, [pc, #40]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800188c:	2b00      	cmp	r3, #0
 800188e:	d105      	bne.n	800189c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001890:	4b07      	ldr	r3, [pc, #28]	@ (80018b0 <FLASH_WaitForLastOperation+0x88>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800189c:	f000 f80a 	bl	80018b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3710      	adds	r7, #16
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40022000 	.word	0x40022000

080018b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <FLASH_SetErrorCode+0x98>)
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d009      	beq.n	80018de <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80018ca:	4b21      	ldr	r3, [pc, #132]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	f043 0302 	orr.w	r3, r3, #2
 80018d2:	4a1f      	ldr	r2, [pc, #124]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 80018d4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f043 0310 	orr.w	r3, r3, #16
 80018dc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80018de:	4b1b      	ldr	r3, [pc, #108]	@ (800194c <FLASH_SetErrorCode+0x98>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80018ea:	4b19      	ldr	r3, [pc, #100]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	f043 0301 	orr.w	r3, r3, #1
 80018f2:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 80018f4:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f043 0304 	orr.w	r3, r3, #4
 80018fc:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80018fe:	4b13      	ldr	r3, [pc, #76]	@ (800194c <FLASH_SetErrorCode+0x98>)
 8001900:	69db      	ldr	r3, [r3, #28]
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00b      	beq.n	8001922 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800190a:	4b11      	ldr	r3, [pc, #68]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	f043 0304 	orr.w	r3, r3, #4
 8001912:	4a0f      	ldr	r2, [pc, #60]	@ (8001950 <FLASH_SetErrorCode+0x9c>)
 8001914:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001916:	4b0d      	ldr	r3, [pc, #52]	@ (800194c <FLASH_SetErrorCode+0x98>)
 8001918:	69db      	ldr	r3, [r3, #28]
 800191a:	4a0c      	ldr	r2, [pc, #48]	@ (800194c <FLASH_SetErrorCode+0x98>)
 800191c:	f023 0301 	bic.w	r3, r3, #1
 8001920:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f240 1201 	movw	r2, #257	@ 0x101
 8001928:	4293      	cmp	r3, r2
 800192a:	d106      	bne.n	800193a <FLASH_SetErrorCode+0x86>
 800192c:	4b07      	ldr	r3, [pc, #28]	@ (800194c <FLASH_SetErrorCode+0x98>)
 800192e:	69db      	ldr	r3, [r3, #28]
 8001930:	4a06      	ldr	r2, [pc, #24]	@ (800194c <FLASH_SetErrorCode+0x98>)
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	61d3      	str	r3, [r2, #28]
}  
 8001938:	e002      	b.n	8001940 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800193a:	4a04      	ldr	r2, [pc, #16]	@ (800194c <FLASH_SetErrorCode+0x98>)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	60d3      	str	r3, [r2, #12]
}  
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40022000 	.word	0x40022000
 8001950:	20000180 	.word	0x20000180

08001954 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001966:	4b2f      	ldr	r3, [pc, #188]	@ (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001968:	7e1b      	ldrb	r3, [r3, #24]
 800196a:	2b01      	cmp	r3, #1
 800196c:	d101      	bne.n	8001972 <HAL_FLASHEx_Erase+0x1e>
 800196e:	2302      	movs	r3, #2
 8001970:	e053      	b.n	8001a1a <HAL_FLASHEx_Erase+0xc6>
 8001972:	4b2c      	ldr	r3, [pc, #176]	@ (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001974:	2201      	movs	r2, #1
 8001976:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d116      	bne.n	80019ae <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001980:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001984:	f7ff ff50 	bl	8001828 <FLASH_WaitForLastOperation>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d141      	bne.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 800198e:	2001      	movs	r0, #1
 8001990:	f000 f84c 	bl	8001a2c <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001994:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001998:	f7ff ff46 	bl	8001828 <FLASH_WaitForLastOperation>
 800199c:	4603      	mov	r3, r0
 800199e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80019a0:	4b21      	ldr	r3, [pc, #132]	@ (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	4a20      	ldr	r2, [pc, #128]	@ (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019a6:	f023 0304 	bic.w	r3, r3, #4
 80019aa:	6113      	str	r3, [r2, #16]
 80019ac:	e031      	b.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80019ae:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019b2:	f7ff ff39 	bl	8001828 <FLASH_WaitForLastOperation>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d12a      	bne.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019c2:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e019      	b.n	8001a00 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80019cc:	68b8      	ldr	r0, [r7, #8]
 80019ce:	f000 f849 	bl	8001a64 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80019d2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80019d6:	f7ff ff27 	bl	8001828 <FLASH_WaitForLastOperation>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019e0:	691b      	ldr	r3, [r3, #16]
 80019e2:	4a11      	ldr	r2, [pc, #68]	@ (8001a28 <HAL_FLASHEx_Erase+0xd4>)
 80019e4:	f023 0302 	bic.w	r3, r3, #2
 80019e8:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 80019ea:	7bfb      	ldrb	r3, [r7, #15]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	601a      	str	r2, [r3, #0]
            break;
 80019f6:	e00c      	b.n	8001a12 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80019f8:	68bb      	ldr	r3, [r7, #8]
 80019fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80019fe:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	029a      	lsls	r2, r3, #10
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	68ba      	ldr	r2, [r7, #8]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d3dc      	bcc.n	80019cc <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <HAL_FLASHEx_Erase+0xd0>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	761a      	strb	r2, [r3, #24]

  return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000180 	.word	0x20000180
 8001a28:	40022000 	.word	0x40022000

08001a2c <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <FLASH_MassErase+0x30>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001a3a:	4b09      	ldr	r3, [pc, #36]	@ (8001a60 <FLASH_MassErase+0x34>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <FLASH_MassErase+0x34>)
 8001a40:	f043 0304 	orr.w	r3, r3, #4
 8001a44:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a46:	4b06      	ldr	r3, [pc, #24]	@ (8001a60 <FLASH_MassErase+0x34>)
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	4a05      	ldr	r2, [pc, #20]	@ (8001a60 <FLASH_MassErase+0x34>)
 8001a4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a50:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bc80      	pop	{r7}
 8001a5a:	4770      	bx	lr
 8001a5c:	20000180 	.word	0x20000180
 8001a60:	40022000 	.word	0x40022000

08001a64 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <FLASH_PageErase+0x38>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001a72:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa0 <FLASH_PageErase+0x3c>)
 8001a74:	691b      	ldr	r3, [r3, #16]
 8001a76:	4a0a      	ldr	r2, [pc, #40]	@ (8001aa0 <FLASH_PageErase+0x3c>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001a7e:	4a08      	ldr	r2, [pc, #32]	@ (8001aa0 <FLASH_PageErase+0x3c>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001a84:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <FLASH_PageErase+0x3c>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a05      	ldr	r2, [pc, #20]	@ (8001aa0 <FLASH_PageErase+0x3c>)
 8001a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a8e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	20000180 	.word	0x20000180
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b08b      	sub	sp, #44	@ 0x2c
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab6:	e169      	b.n	8001d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab8:	2201      	movs	r2, #1
 8001aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001acc:	69ba      	ldr	r2, [r7, #24]
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	f040 8158 	bne.w	8001d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4a9a      	ldr	r2, [pc, #616]	@ (8001d44 <HAL_GPIO_Init+0x2a0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d05e      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001ae0:	4a98      	ldr	r2, [pc, #608]	@ (8001d44 <HAL_GPIO_Init+0x2a0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d875      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001ae6:	4a98      	ldr	r2, [pc, #608]	@ (8001d48 <HAL_GPIO_Init+0x2a4>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d058      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001aec:	4a96      	ldr	r2, [pc, #600]	@ (8001d48 <HAL_GPIO_Init+0x2a4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d86f      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001af2:	4a96      	ldr	r2, [pc, #600]	@ (8001d4c <HAL_GPIO_Init+0x2a8>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d052      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001af8:	4a94      	ldr	r2, [pc, #592]	@ (8001d4c <HAL_GPIO_Init+0x2a8>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d869      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001afe:	4a94      	ldr	r2, [pc, #592]	@ (8001d50 <HAL_GPIO_Init+0x2ac>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04c      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001b04:	4a92      	ldr	r2, [pc, #584]	@ (8001d50 <HAL_GPIO_Init+0x2ac>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d863      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b0a:	4a92      	ldr	r2, [pc, #584]	@ (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d046      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
 8001b10:	4a90      	ldr	r2, [pc, #576]	@ (8001d54 <HAL_GPIO_Init+0x2b0>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d85d      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b16:	2b12      	cmp	r3, #18
 8001b18:	d82a      	bhi.n	8001b70 <HAL_GPIO_Init+0xcc>
 8001b1a:	2b12      	cmp	r3, #18
 8001b1c:	d859      	bhi.n	8001bd2 <HAL_GPIO_Init+0x12e>
 8001b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b24 <HAL_GPIO_Init+0x80>)
 8001b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b24:	08001b9f 	.word	0x08001b9f
 8001b28:	08001b79 	.word	0x08001b79
 8001b2c:	08001b8b 	.word	0x08001b8b
 8001b30:	08001bcd 	.word	0x08001bcd
 8001b34:	08001bd3 	.word	0x08001bd3
 8001b38:	08001bd3 	.word	0x08001bd3
 8001b3c:	08001bd3 	.word	0x08001bd3
 8001b40:	08001bd3 	.word	0x08001bd3
 8001b44:	08001bd3 	.word	0x08001bd3
 8001b48:	08001bd3 	.word	0x08001bd3
 8001b4c:	08001bd3 	.word	0x08001bd3
 8001b50:	08001bd3 	.word	0x08001bd3
 8001b54:	08001bd3 	.word	0x08001bd3
 8001b58:	08001bd3 	.word	0x08001bd3
 8001b5c:	08001bd3 	.word	0x08001bd3
 8001b60:	08001bd3 	.word	0x08001bd3
 8001b64:	08001bd3 	.word	0x08001bd3
 8001b68:	08001b81 	.word	0x08001b81
 8001b6c:	08001b95 	.word	0x08001b95
 8001b70:	4a79      	ldr	r2, [pc, #484]	@ (8001d58 <HAL_GPIO_Init+0x2b4>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d013      	beq.n	8001b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b76:	e02c      	b.n	8001bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	623b      	str	r3, [r7, #32]
          break;
 8001b7e:	e029      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	3304      	adds	r3, #4
 8001b86:	623b      	str	r3, [r7, #32]
          break;
 8001b88:	e024      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	3308      	adds	r3, #8
 8001b90:	623b      	str	r3, [r7, #32]
          break;
 8001b92:	e01f      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	330c      	adds	r3, #12
 8001b9a:	623b      	str	r3, [r7, #32]
          break;
 8001b9c:	e01a      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d102      	bne.n	8001bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	623b      	str	r3, [r7, #32]
          break;
 8001baa:	e013      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bb4:	2308      	movs	r3, #8
 8001bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	611a      	str	r2, [r3, #16]
          break;
 8001bbe:	e009      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc0:	2308      	movs	r3, #8
 8001bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69fa      	ldr	r2, [r7, #28]
 8001bc8:	615a      	str	r2, [r3, #20]
          break;
 8001bca:	e003      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e000      	b.n	8001bd4 <HAL_GPIO_Init+0x130>
          break;
 8001bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	2bff      	cmp	r3, #255	@ 0xff
 8001bd8:	d801      	bhi.n	8001bde <HAL_GPIO_Init+0x13a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	e001      	b.n	8001be2 <HAL_GPIO_Init+0x13e>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d802      	bhi.n	8001bf0 <HAL_GPIO_Init+0x14c>
 8001bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	e002      	b.n	8001bf6 <HAL_GPIO_Init+0x152>
 8001bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf2:	3b08      	subs	r3, #8
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	210f      	movs	r1, #15
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	fa01 f303 	lsl.w	r3, r1, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	401a      	ands	r2, r3
 8001c08:	6a39      	ldr	r1, [r7, #32]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	431a      	orrs	r2, r3
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80b1 	beq.w	8001d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	@ (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c26:	699b      	ldr	r3, [r3, #24]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	@ (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6193      	str	r3, [r2, #24]
 8001c30:	4b4a      	ldr	r3, [pc, #296]	@ (8001d5c <HAL_GPIO_Init+0x2b8>)
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	60bb      	str	r3, [r7, #8]
 8001c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c3c:	4a48      	ldr	r2, [pc, #288]	@ (8001d60 <HAL_GPIO_Init+0x2bc>)
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	220f      	movs	r2, #15
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	68fa      	ldr	r2, [r7, #12]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	4a40      	ldr	r2, [pc, #256]	@ (8001d64 <HAL_GPIO_Init+0x2c0>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d013      	beq.n	8001c90 <HAL_GPIO_Init+0x1ec>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d68 <HAL_GPIO_Init+0x2c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d00d      	beq.n	8001c8c <HAL_GPIO_Init+0x1e8>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a3e      	ldr	r2, [pc, #248]	@ (8001d6c <HAL_GPIO_Init+0x2c8>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d007      	beq.n	8001c88 <HAL_GPIO_Init+0x1e4>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d70 <HAL_GPIO_Init+0x2cc>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d101      	bne.n	8001c84 <HAL_GPIO_Init+0x1e0>
 8001c80:	2303      	movs	r3, #3
 8001c82:	e006      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c84:	2304      	movs	r3, #4
 8001c86:	e004      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c88:	2302      	movs	r3, #2
 8001c8a:	e002      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_GPIO_Init+0x1ee>
 8001c90:	2300      	movs	r3, #0
 8001c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c94:	f002 0203 	and.w	r2, r2, #3
 8001c98:	0092      	lsls	r2, r2, #2
 8001c9a:	4093      	lsls	r3, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ca2:	492f      	ldr	r1, [pc, #188]	@ (8001d60 <HAL_GPIO_Init+0x2bc>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	492c      	ldr	r1, [pc, #176]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	608b      	str	r3, [r1, #8]
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001ccc:	689a      	ldr	r2, [r3, #8]
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	4928      	ldr	r1, [pc, #160]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d006      	beq.n	8001cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce4:	4b23      	ldr	r3, [pc, #140]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001ce6:	68da      	ldr	r2, [r3, #12]
 8001ce8:	4922      	ldr	r1, [pc, #136]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	60cb      	str	r3, [r1, #12]
 8001cf0:	e006      	b.n	8001d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf2:	4b20      	ldr	r3, [pc, #128]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cf4:	68da      	ldr	r2, [r3, #12]
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	491e      	ldr	r1, [pc, #120]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d006      	beq.n	8001d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d0c:	4b19      	ldr	r3, [pc, #100]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	4918      	ldr	r1, [pc, #96]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e006      	b.n	8001d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d1a:	4b16      	ldr	r3, [pc, #88]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d1c:	685a      	ldr	r2, [r3, #4]
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	43db      	mvns	r3, r3
 8001d22:	4914      	ldr	r1, [pc, #80]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d24:	4013      	ands	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d021      	beq.n	8001d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d34:	4b0f      	ldr	r3, [pc, #60]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	490e      	ldr	r1, [pc, #56]	@ (8001d74 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	600b      	str	r3, [r1, #0]
 8001d40:	e021      	b.n	8001d86 <HAL_GPIO_Init+0x2e2>
 8001d42:	bf00      	nop
 8001d44:	10320000 	.word	0x10320000
 8001d48:	10310000 	.word	0x10310000
 8001d4c:	10220000 	.word	0x10220000
 8001d50:	10210000 	.word	0x10210000
 8001d54:	10120000 	.word	0x10120000
 8001d58:	10110000 	.word	0x10110000
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40010000 	.word	0x40010000
 8001d64:	40010800 	.word	0x40010800
 8001d68:	40010c00 	.word	0x40010c00
 8001d6c:	40011000 	.word	0x40011000
 8001d70:	40011400 	.word	0x40011400
 8001d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d78:	4b0b      	ldr	r3, [pc, #44]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	4909      	ldr	r1, [pc, #36]	@ (8001da8 <HAL_GPIO_Init+0x304>)
 8001d82:	4013      	ands	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d88:	3301      	adds	r3, #1
 8001d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d92:	fa22 f303 	lsr.w	r3, r2, r3
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	f47f ae8e 	bne.w	8001ab8 <HAL_GPIO_Init+0x14>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	372c      	adds	r7, #44	@ 0x2c
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr
 8001da8:	40010400 	.word	0x40010400

08001dac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689a      	ldr	r2, [r3, #8]
 8001dbc:	887b      	ldrh	r3, [r7, #2]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d002      	beq.n	8001dca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	73fb      	strb	r3, [r7, #15]
 8001dc8:	e001      	b.n	8001dce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3714      	adds	r7, #20
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bc80      	pop	{r7}
 8001dd8:	4770      	bx	lr

08001dda <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
 8001de2:	460b      	mov	r3, r1
 8001de4:	807b      	strh	r3, [r7, #2]
 8001de6:	4613      	mov	r3, r2
 8001de8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dea:	787b      	ldrb	r3, [r7, #1]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df0:	887a      	ldrh	r2, [r7, #2]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001df6:	e003      	b.n	8001e00 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001df8:	887b      	ldrh	r3, [r7, #2]
 8001dfa:	041a      	lsls	r2, r3, #16
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	611a      	str	r2, [r3, #16]
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	b085      	sub	sp, #20
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	6078      	str	r0, [r7, #4]
 8001e12:	460b      	mov	r3, r1
 8001e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	4013      	ands	r3, r2
 8001e22:	041a      	lsls	r2, r3, #16
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	43d9      	mvns	r1, r3
 8001e28:	887b      	ldrh	r3, [r7, #2]
 8001e2a:	400b      	ands	r3, r1
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	611a      	str	r2, [r3, #16]
}
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr

08001e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b086      	sub	sp, #24
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d101      	bne.n	8001e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e272      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 8087 	beq.w	8001f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e5c:	4b92      	ldr	r3, [pc, #584]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f003 030c 	and.w	r3, r3, #12
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d00c      	beq.n	8001e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e68:	4b8f      	ldr	r3, [pc, #572]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f003 030c 	and.w	r3, r3, #12
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d112      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
 8001e74:	4b8c      	ldr	r3, [pc, #560]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e80:	d10b      	bne.n	8001e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e82:	4b89      	ldr	r3, [pc, #548]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d06c      	beq.n	8001f68 <HAL_RCC_OscConfig+0x12c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d168      	bne.n	8001f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e96:	2301      	movs	r3, #1
 8001e98:	e24c      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x76>
 8001ea4:	4b80      	ldr	r3, [pc, #512]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eae:	6013      	str	r3, [r2, #0]
 8001eb0:	e02e      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10c      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x98>
 8001eba:	4b7b      	ldr	r3, [pc, #492]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec4:	6013      	str	r3, [r2, #0]
 8001ec6:	4b78      	ldr	r3, [pc, #480]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a77      	ldr	r2, [pc, #476]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed0:	6013      	str	r3, [r2, #0]
 8001ed2:	e01d      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001edc:	d10c      	bne.n	8001ef8 <HAL_RCC_OscConfig+0xbc>
 8001ede:	4b72      	ldr	r3, [pc, #456]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a71      	ldr	r2, [pc, #452]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4b6f      	ldr	r3, [pc, #444]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a6e      	ldr	r2, [pc, #440]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0xd4>
 8001ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a6a      	ldr	r2, [pc, #424]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f02:	6013      	str	r3, [r2, #0]
 8001f04:	4b68      	ldr	r3, [pc, #416]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a67      	ldr	r2, [pc, #412]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d013      	beq.n	8001f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f18:	f7ff fa88 	bl	800142c <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	e008      	b.n	8001f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f20:	f7ff fa84 	bl	800142c <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b64      	cmp	r3, #100	@ 0x64
 8001f2c:	d901      	bls.n	8001f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	e200      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d0f0      	beq.n	8001f20 <HAL_RCC_OscConfig+0xe4>
 8001f3e:	e014      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f40:	f7ff fa74 	bl	800142c <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f48:	f7ff fa70 	bl	800142c <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b64      	cmp	r3, #100	@ 0x64
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e1ec      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5a:	4b53      	ldr	r3, [pc, #332]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x10c>
 8001f66:	e000      	b.n	8001f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d063      	beq.n	800203e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f76:	4b4c      	ldr	r3, [pc, #304]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 030c 	and.w	r3, r3, #12
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00b      	beq.n	8001f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f82:	4b49      	ldr	r3, [pc, #292]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f003 030c 	and.w	r3, r3, #12
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d11c      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
 8001f8e:	4b46      	ldr	r3, [pc, #280]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d116      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d001      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e1c0      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4939      	ldr	r1, [pc, #228]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fc6:	e03a      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd0:	4b36      	ldr	r3, [pc, #216]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd6:	f7ff fa29 	bl	800142c <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fdc:	e008      	b.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fde:	f7ff fa25 	bl	800142c <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	2b02      	cmp	r3, #2
 8001fea:	d901      	bls.n	8001ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fec:	2303      	movs	r3, #3
 8001fee:	e1a1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0302 	and.w	r3, r3, #2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	695b      	ldr	r3, [r3, #20]
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	4927      	ldr	r1, [pc, #156]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	600b      	str	r3, [r1, #0]
 8002010:	e015      	b.n	800203e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002012:	4b26      	ldr	r3, [pc, #152]	@ (80020ac <HAL_RCC_OscConfig+0x270>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fa08 	bl	800142c <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002020:	f7ff fa04 	bl	800142c <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e180      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002032:	4b1d      	ldr	r3, [pc, #116]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	2b00      	cmp	r3, #0
 8002048:	d03a      	beq.n	80020c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d019      	beq.n	8002086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002052:	4b17      	ldr	r3, [pc, #92]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002054:	2201      	movs	r2, #1
 8002056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002058:	f7ff f9e8 	bl	800142c <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002060:	f7ff f9e4 	bl	800142c <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e160      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_OscConfig+0x26c>)
 8002074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f000 face 	bl	8002620 <RCC_Delay>
 8002084:	e01c      	b.n	80020c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002086:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <HAL_RCC_OscConfig+0x274>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800208c:	f7ff f9ce 	bl	800142c <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002092:	e00f      	b.n	80020b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002094:	f7ff f9ca 	bl	800142c <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d908      	bls.n	80020b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e146      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 80020a6:	bf00      	nop
 80020a8:	40021000 	.word	0x40021000
 80020ac:	42420000 	.word	0x42420000
 80020b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b4:	4b92      	ldr	r3, [pc, #584]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d1e9      	bne.n	8002094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f000 80a6 	beq.w	800221a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ce:	2300      	movs	r3, #0
 80020d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d2:	4b8b      	ldr	r3, [pc, #556]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10d      	bne.n	80020fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020de:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	4a87      	ldr	r2, [pc, #540]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e8:	61d3      	str	r3, [r2, #28]
 80020ea:	4b85      	ldr	r3, [pc, #532]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f2:	60bb      	str	r3, [r7, #8]
 80020f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020f6:	2301      	movs	r3, #1
 80020f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fa:	4b82      	ldr	r3, [pc, #520]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002102:	2b00      	cmp	r3, #0
 8002104:	d118      	bne.n	8002138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002106:	4b7f      	ldr	r3, [pc, #508]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a7e      	ldr	r2, [pc, #504]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002112:	f7ff f98b 	bl	800142c <HAL_GetTick>
 8002116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002118:	e008      	b.n	800212c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211a:	f7ff f987 	bl	800142c <HAL_GetTick>
 800211e:	4602      	mov	r2, r0
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	1ad3      	subs	r3, r2, r3
 8002124:	2b64      	cmp	r3, #100	@ 0x64
 8002126:	d901      	bls.n	800212c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e103      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800212c:	4b75      	ldr	r3, [pc, #468]	@ (8002304 <HAL_RCC_OscConfig+0x4c8>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002134:	2b00      	cmp	r3, #0
 8002136:	d0f0      	beq.n	800211a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d106      	bne.n	800214e <HAL_RCC_OscConfig+0x312>
 8002140:	4b6f      	ldr	r3, [pc, #444]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002142:	6a1b      	ldr	r3, [r3, #32]
 8002144:	4a6e      	ldr	r2, [pc, #440]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6213      	str	r3, [r2, #32]
 800214c:	e02d      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10c      	bne.n	8002170 <HAL_RCC_OscConfig+0x334>
 8002156:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	6a1b      	ldr	r3, [r3, #32]
 800215a:	4a69      	ldr	r2, [pc, #420]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	f023 0301 	bic.w	r3, r3, #1
 8002160:	6213      	str	r3, [r2, #32]
 8002162:	4b67      	ldr	r3, [pc, #412]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	4a66      	ldr	r2, [pc, #408]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	f023 0304 	bic.w	r3, r3, #4
 800216c:	6213      	str	r3, [r2, #32]
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x356>
 8002178:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a60      	ldr	r2, [pc, #384]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6213      	str	r3, [r2, #32]
 8002184:	4b5e      	ldr	r3, [pc, #376]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a5d      	ldr	r2, [pc, #372]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6213      	str	r3, [r2, #32]
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x36e>
 8002192:	4b5b      	ldr	r3, [pc, #364]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	6a1b      	ldr	r3, [r3, #32]
 8002196:	4a5a      	ldr	r2, [pc, #360]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6213      	str	r3, [r2, #32]
 800219e:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	4a57      	ldr	r2, [pc, #348]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff f93b 	bl	800142c <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff f937 	bl	800142c <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0b1      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b4b      	ldr	r3, [pc, #300]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x37e>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff f925 	bl	800142c <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff f921 	bl	800142c <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e09b      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b3c      	ldr	r3, [pc, #240]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002210:	69db      	ldr	r3, [r3, #28]
 8002212:	4a3b      	ldr	r2, [pc, #236]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 8087 	beq.w	8002332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002224:	4b36      	ldr	r3, [pc, #216]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d061      	beq.n	80022f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	69db      	ldr	r3, [r3, #28]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d146      	bne.n	80022c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b33      	ldr	r3, [pc, #204]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff f8f5 	bl	800142c <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff f8f1 	bl	800142c <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e06d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002258:	4b29      	ldr	r3, [pc, #164]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800226c:	d108      	bne.n	8002280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	4921      	ldr	r1, [pc, #132]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	4313      	orrs	r3, r2
 800227e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a19      	ldr	r1, [r3, #32]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002290:	430b      	orrs	r3, r1
 8002292:	491b      	ldr	r1, [pc, #108]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 8002294:	4313      	orrs	r3, r2
 8002296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002298:	4b1b      	ldr	r3, [pc, #108]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 800229a:	2201      	movs	r2, #1
 800229c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229e:	f7ff f8c5 	bl	800142c <HAL_GetTick>
 80022a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a4:	e008      	b.n	80022b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a6:	f7ff f8c1 	bl	800142c <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d901      	bls.n	80022b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b4:	2303      	movs	r3, #3
 80022b6:	e03d      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b8:	4b11      	ldr	r3, [pc, #68]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0f0      	beq.n	80022a6 <HAL_RCC_OscConfig+0x46a>
 80022c4:	e035      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c6:	4b10      	ldr	r3, [pc, #64]	@ (8002308 <HAL_RCC_OscConfig+0x4cc>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022cc:	f7ff f8ae 	bl	800142c <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d4:	f7ff f8aa 	bl	800142c <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e026      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e6:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1f0      	bne.n	80022d4 <HAL_RCC_OscConfig+0x498>
 80022f2:	e01e      	b.n	8002332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d107      	bne.n	800230c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e019      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <HAL_RCC_OscConfig+0x500>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
 800231c:	429a      	cmp	r2, r3
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232a:	429a      	cmp	r2, r3
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40021000 	.word	0x40021000

08002340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0d0      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002354:	4b6a      	ldr	r3, [pc, #424]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	d910      	bls.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	4b67      	ldr	r3, [pc, #412]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f023 0207 	bic.w	r2, r3, #7
 800236a:	4965      	ldr	r1, [pc, #404]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	4313      	orrs	r3, r2
 8002370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002372:	4b63      	ldr	r3, [pc, #396]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d001      	beq.n	8002384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0b8      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0302 	and.w	r3, r3, #2
 800238c:	2b00      	cmp	r3, #0
 800238e:	d020      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 0304 	and.w	r3, r3, #4
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800239c:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	4a58      	ldr	r2, [pc, #352]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b4:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	4a52      	ldr	r2, [pc, #328]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c0:	4b50      	ldr	r3, [pc, #320]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	494d      	ldr	r1, [pc, #308]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d040      	beq.n	8002460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d107      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e6:	4b47      	ldr	r3, [pc, #284]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d115      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e07f      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d107      	bne.n	800240e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023fe:	4b41      	ldr	r3, [pc, #260]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e073      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0302 	and.w	r3, r3, #2
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e06b      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800241e:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f023 0203 	bic.w	r2, r3, #3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4936      	ldr	r1, [pc, #216]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800242c:	4313      	orrs	r3, r2
 800242e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002430:	f7fe fffc 	bl	800142c <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002436:	e00a      	b.n	800244e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002438:	f7fe fff8 	bl	800142c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d901      	bls.n	800244e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e053      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800244e:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 020c 	and.w	r2, r3, #12
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	429a      	cmp	r2, r3
 800245e:	d1eb      	bne.n	8002438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002460:	4b27      	ldr	r3, [pc, #156]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0307 	and.w	r3, r3, #7
 8002468:	683a      	ldr	r2, [r7, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d210      	bcs.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246e:	4b24      	ldr	r3, [pc, #144]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f023 0207 	bic.w	r2, r3, #7
 8002476:	4922      	ldr	r1, [pc, #136]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	4313      	orrs	r3, r2
 800247c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800247e:	4b20      	ldr	r3, [pc, #128]	@ (8002500 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0307 	and.w	r3, r3, #7
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d001      	beq.n	8002490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e032      	b.n	80024f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	4916      	ldr	r1, [pc, #88]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0308 	and.w	r3, r3, #8
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	691b      	ldr	r3, [r3, #16]
 80024c6:	00db      	lsls	r3, r3, #3
 80024c8:	490e      	ldr	r1, [pc, #56]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024ca:	4313      	orrs	r3, r2
 80024cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024ce:	f000 f821 	bl	8002514 <HAL_RCC_GetSysClockFreq>
 80024d2:	4602      	mov	r2, r0
 80024d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_ClockConfig+0x1c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	091b      	lsrs	r3, r3, #4
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	490a      	ldr	r1, [pc, #40]	@ (8002508 <HAL_RCC_ClockConfig+0x1c8>)
 80024e0:	5ccb      	ldrb	r3, [r1, r3]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	4a09      	ldr	r2, [pc, #36]	@ (800250c <HAL_RCC_ClockConfig+0x1cc>)
 80024e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ea:	4b09      	ldr	r3, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1d0>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff5a 	bl	80013a8 <HAL_InitTick>

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40022000 	.word	0x40022000
 8002504:	40021000 	.word	0x40021000
 8002508:	0800418c 	.word	0x0800418c
 800250c:	2000000c 	.word	0x2000000c
 8002510:	20000010 	.word	0x20000010

08002514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002514:	b480      	push	{r7}
 8002516:	b087      	sub	sp, #28
 8002518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251a:	2300      	movs	r3, #0
 800251c:	60fb      	str	r3, [r7, #12]
 800251e:	2300      	movs	r3, #0
 8002520:	60bb      	str	r3, [r7, #8]
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800252e:	4b1e      	ldr	r3, [pc, #120]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f003 030c 	and.w	r3, r3, #12
 800253a:	2b04      	cmp	r3, #4
 800253c:	d002      	beq.n	8002544 <HAL_RCC_GetSysClockFreq+0x30>
 800253e:	2b08      	cmp	r3, #8
 8002540:	d003      	beq.n	800254a <HAL_RCC_GetSysClockFreq+0x36>
 8002542:	e027      	b.n	8002594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002546:	613b      	str	r3, [r7, #16]
      break;
 8002548:	e027      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	0c9b      	lsrs	r3, r3, #18
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	4a17      	ldr	r2, [pc, #92]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002554:	5cd3      	ldrb	r3, [r2, r3]
 8002556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d010      	beq.n	8002584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002562:	4b11      	ldr	r3, [pc, #68]	@ (80025a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	0c5b      	lsrs	r3, r3, #17
 8002568:	f003 0301 	and.w	r3, r3, #1
 800256c:	4a11      	ldr	r2, [pc, #68]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800256e:	5cd3      	ldrb	r3, [r2, r3]
 8002570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a0d      	ldr	r2, [pc, #52]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002576:	fb03 f202 	mul.w	r2, r3, r2
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	617b      	str	r3, [r7, #20]
 8002582:	e004      	b.n	800258e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	4a0c      	ldr	r2, [pc, #48]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002588:	fb02 f303 	mul.w	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	613b      	str	r3, [r7, #16]
      break;
 8002592:	e002      	b.n	800259a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002594:	4b05      	ldr	r3, [pc, #20]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x98>)
 8002596:	613b      	str	r3, [r7, #16]
      break;
 8002598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259a:	693b      	ldr	r3, [r7, #16]
}
 800259c:	4618      	mov	r0, r3
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bc80      	pop	{r7}
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
 80025ac:	007a1200 	.word	0x007a1200
 80025b0:	080041a4 	.word	0x080041a4
 80025b4:	080041b4 	.word	0x080041b4
 80025b8:	003d0900 	.word	0x003d0900

080025bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c0:	4b02      	ldr	r3, [pc, #8]	@ (80025cc <HAL_RCC_GetHCLKFreq+0x10>)
 80025c2:	681b      	ldr	r3, [r3, #0]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bc80      	pop	{r7}
 80025ca:	4770      	bx	lr
 80025cc:	2000000c 	.word	0x2000000c

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff2 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	0a1b      	lsrs	r3, r3, #8
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	0800419c 	.word	0x0800419c

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffde 	bl	80025bc <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	0adb      	lsrs	r3, r3, #11
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	0800419c 	.word	0x0800419c

08002620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002628:	4b0a      	ldr	r3, [pc, #40]	@ (8002654 <RCC_Delay+0x34>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <RCC_Delay+0x38>)
 800262e:	fba2 2303 	umull	r2, r3, r2, r3
 8002632:	0a5b      	lsrs	r3, r3, #9
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	fb02 f303 	mul.w	r3, r2, r3
 800263a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800263c:	bf00      	nop
  }
  while (Delay --);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	1e5a      	subs	r2, r3, #1
 8002642:	60fa      	str	r2, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f9      	bne.n	800263c <RCC_Delay+0x1c>
}
 8002648:	bf00      	nop
 800264a:	bf00      	nop
 800264c:	3714      	adds	r7, #20
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	2000000c 	.word	0x2000000c
 8002658:	10624dd3 	.word	0x10624dd3

0800265c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e076      	b.n	800275c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d108      	bne.n	8002688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800267e:	d009      	beq.n	8002694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2200      	movs	r2, #0
 8002684:	61da      	str	r2, [r3, #28]
 8002686:	e005      	b.n	8002694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d106      	bne.n	80026b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f7fe fd10 	bl	80010d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026dc:	431a      	orrs	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	f003 0301 	and.w	r3, r3, #1
 80026fa:	431a      	orrs	r2, r3
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69db      	ldr	r3, [r3, #28]
 800270a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002718:	ea42 0103 	orr.w	r1, r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002720:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	0c1a      	lsrs	r2, r3, #16
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f002 0204 	and.w	r2, r2, #4
 800273a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	69da      	ldr	r2, [r3, #28]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800274a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	3708      	adds	r7, #8
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b088      	sub	sp, #32
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	603b      	str	r3, [r7, #0]
 8002770:	4613      	mov	r3, r2
 8002772:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002774:	f7fe fe5a 	bl	800142c <HAL_GetTick>
 8002778:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800277a:	88fb      	ldrh	r3, [r7, #6]
 800277c:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002784:	b2db      	uxtb	r3, r3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d001      	beq.n	800278e <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800278a:	2302      	movs	r3, #2
 800278c:	e12a      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d002      	beq.n	800279a <HAL_SPI_Transmit+0x36>
 8002794:	88fb      	ldrh	r3, [r7, #6]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e122      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_SPI_Transmit+0x48>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e11b      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2203      	movs	r2, #3
 80027b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	68ba      	ldr	r2, [r7, #8]
 80027c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	88fa      	ldrh	r2, [r7, #6]
 80027cc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	88fa      	ldrh	r2, [r7, #6]
 80027d2:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027fa:	d10f      	bne.n	800281c <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800280a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800281a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002826:	2b40      	cmp	r3, #64	@ 0x40
 8002828:	d007      	beq.n	800283a <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002838:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002842:	d152      	bne.n	80028ea <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d002      	beq.n	8002852 <HAL_SPI_Transmit+0xee>
 800284c:	8b7b      	ldrh	r3, [r7, #26]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d145      	bne.n	80028de <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002856:	881a      	ldrh	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002862:	1c9a      	adds	r2, r3, #2
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800286c:	b29b      	uxth	r3, r3
 800286e:	3b01      	subs	r3, #1
 8002870:	b29a      	uxth	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002876:	e032      	b.n	80028de <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b02      	cmp	r3, #2
 8002884:	d112      	bne.n	80028ac <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800288a:	881a      	ldrh	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002896:	1c9a      	adds	r2, r3, #2
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	3b01      	subs	r3, #1
 80028a4:	b29a      	uxth	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80028aa:	e018      	b.n	80028de <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028ac:	f7fe fdbe 	bl	800142c <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d803      	bhi.n	80028c4 <HAL_SPI_Transmit+0x160>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028c2:	d102      	bne.n	80028ca <HAL_SPI_Transmit+0x166>
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d109      	bne.n	80028de <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e082      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1c7      	bne.n	8002878 <HAL_SPI_Transmit+0x114>
 80028e8:	e053      	b.n	8002992 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d002      	beq.n	80028f8 <HAL_SPI_Transmit+0x194>
 80028f2:	8b7b      	ldrh	r3, [r7, #26]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d147      	bne.n	8002988 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	330c      	adds	r3, #12
 8002902:	7812      	ldrb	r2, [r2, #0]
 8002904:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	1c5a      	adds	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002914:	b29b      	uxth	r3, r3
 8002916:	3b01      	subs	r3, #1
 8002918:	b29a      	uxth	r2, r3
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800291e:	e033      	b.n	8002988 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	2b02      	cmp	r3, #2
 800292c:	d113      	bne.n	8002956 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	330c      	adds	r3, #12
 8002938:	7812      	ldrb	r2, [r2, #0]
 800293a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002954:	e018      	b.n	8002988 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002956:	f7fe fd69 	bl	800142c <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d803      	bhi.n	800296e <HAL_SPI_Transmit+0x20a>
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800296c:	d102      	bne.n	8002974 <HAL_SPI_Transmit+0x210>
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d109      	bne.n	8002988 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e02d      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800298c:	b29b      	uxth	r3, r3
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1c6      	bne.n	8002920 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002992:	69fa      	ldr	r2, [r7, #28]
 8002994:	6839      	ldr	r1, [r7, #0]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 f8b0 	bl	8002afc <SPI_EndRxTxTransaction>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2220      	movs	r2, #32
 80029a6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10a      	bne.n	80029c6 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029e2:	2300      	movs	r3, #0
  }
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	603b      	str	r3, [r7, #0]
 80029f8:	4613      	mov	r3, r2
 80029fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029fc:	f7fe fd16 	bl	800142c <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002a0c:	f7fe fd0e 	bl	800142c <HAL_GetTick>
 8002a10:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002a12:	4b39      	ldr	r3, [pc, #228]	@ (8002af8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	015b      	lsls	r3, r3, #5
 8002a18:	0d1b      	lsrs	r3, r3, #20
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002a22:	e054      	b.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a2a:	d050      	beq.n	8002ace <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a2c:	f7fe fcfe 	bl	800142c <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	69fa      	ldr	r2, [r7, #28]
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d902      	bls.n	8002a42 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d13d      	bne.n	8002abe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a50:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a5a:	d111      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a64:	d004      	beq.n	8002a70 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a6e:	d107      	bne.n	8002a80 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a7e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a88:	d10f      	bne.n	8002aaa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002aa8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e017      	b.n	8002aee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689a      	ldr	r2, [r3, #8]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	68ba      	ldr	r2, [r7, #8]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	bf0c      	ite	eq
 8002ade:	2301      	moveq	r3, #1
 8002ae0:	2300      	movne	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d19b      	bne.n	8002a24 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3720      	adds	r7, #32
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	2000000c 	.word	0x2000000c

08002afc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	2102      	movs	r1, #2
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f7ff ff6a 	bl	80029ec <SPI_WaitFlagStateUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	f043 0220 	orr.w	r2, r3, #32
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e013      	b.n	8002b56 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2200      	movs	r2, #0
 8002b36:	2180      	movs	r1, #128	@ 0x80
 8002b38:	68f8      	ldr	r0, [r7, #12]
 8002b3a:	f7ff ff57 	bl	80029ec <SPI_WaitFlagStateUntilTimeout>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d007      	beq.n	8002b54 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b48:	f043 0220 	orr.w	r2, r3, #32
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002b50:	2303      	movs	r3, #3
 8002b52:	e000      	b.n	8002b56 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e041      	b.n	8002bf4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d106      	bne.n	8002b8a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	f7fe faf1 	bl	800116c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4610      	mov	r0, r2
 8002b9e:	f000 fa5b 	bl	8003058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3708      	adds	r7, #8
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d001      	beq.n	8002c14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e03a      	b.n	8002c8a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2202      	movs	r2, #2
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68da      	ldr	r2, [r3, #12]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a18      	ldr	r2, [pc, #96]	@ (8002c94 <HAL_TIM_Base_Start_IT+0x98>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d00e      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x58>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c3e:	d009      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x58>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a14      	ldr	r2, [pc, #80]	@ (8002c98 <HAL_TIM_Base_Start_IT+0x9c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d004      	beq.n	8002c54 <HAL_TIM_Base_Start_IT+0x58>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a13      	ldr	r2, [pc, #76]	@ (8002c9c <HAL_TIM_Base_Start_IT+0xa0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d111      	bne.n	8002c78 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b06      	cmp	r3, #6
 8002c64:	d010      	beq.n	8002c88 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f042 0201 	orr.w	r2, r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c76:	e007      	b.n	8002c88 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f042 0201 	orr.w	r2, r2, #1
 8002c86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr
 8002c94:	40012c00 	.word	0x40012c00
 8002c98:	40000400 	.word	0x40000400
 8002c9c:	40000800 	.word	0x40000800

08002ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d020      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d01b      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0202 	mvn.w	r2, #2
 8002cd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d003      	beq.n	8002cf2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f998 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002cf0:	e005      	b.n	8002cfe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f000 f98b 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 f99a 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0304 	and.w	r3, r3, #4
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d020      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d01b      	beq.n	8002d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0204 	mvn.w	r2, #4
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2202      	movs	r2, #2
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f972 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f965 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f974 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f003 0308 	and.w	r3, r3, #8
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d020      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f003 0308 	and.w	r3, r3, #8
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01b      	beq.n	8002d9c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0208 	mvn.w	r2, #8
 8002d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2204      	movs	r2, #4
 8002d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d003      	beq.n	8002d8a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f94c 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002d88:	e005      	b.n	8002d96 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f93f 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f94e 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	f003 0310 	and.w	r3, r3, #16
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d020      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f003 0310 	and.w	r3, r3, #16
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d01b      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f06f 0210 	mvn.w	r2, #16
 8002db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2208      	movs	r2, #8
 8002dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	69db      	ldr	r3, [r3, #28]
 8002dc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f926 	bl	8003020 <HAL_TIM_IC_CaptureCallback>
 8002dd4:	e005      	b.n	8002de2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f919 	bl	800300e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f928 	bl	8003032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00c      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d007      	beq.n	8002e0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fa7e 	bl	8000308 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00c      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d007      	beq.n	8002e30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fa7f 	bl	800332e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00c      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d007      	beq.n	8002e54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f8f8 	bl	8003044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00c      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	f003 0320 	and.w	r3, r3, #32
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f06f 0220 	mvn.w	r2, #32
 8002e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa52 	bl	800331c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e78:	bf00      	nop
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_TIM_ConfigClockSource+0x1c>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e0b4      	b.n	8003006 <HAL_TIM_ConfigClockSource+0x186>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2202      	movs	r2, #2
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002eba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ec2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68ba      	ldr	r2, [r7, #8]
 8002eca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ed4:	d03e      	beq.n	8002f54 <HAL_TIM_ConfigClockSource+0xd4>
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002eda:	f200 8087 	bhi.w	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002ede:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ee2:	f000 8086 	beq.w	8002ff2 <HAL_TIM_ConfigClockSource+0x172>
 8002ee6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eea:	d87f      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002eec:	2b70      	cmp	r3, #112	@ 0x70
 8002eee:	d01a      	beq.n	8002f26 <HAL_TIM_ConfigClockSource+0xa6>
 8002ef0:	2b70      	cmp	r3, #112	@ 0x70
 8002ef2:	d87b      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002ef4:	2b60      	cmp	r3, #96	@ 0x60
 8002ef6:	d050      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x11a>
 8002ef8:	2b60      	cmp	r3, #96	@ 0x60
 8002efa:	d877      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002efc:	2b50      	cmp	r3, #80	@ 0x50
 8002efe:	d03c      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0xfa>
 8002f00:	2b50      	cmp	r3, #80	@ 0x50
 8002f02:	d873      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002f04:	2b40      	cmp	r3, #64	@ 0x40
 8002f06:	d058      	beq.n	8002fba <HAL_TIM_ConfigClockSource+0x13a>
 8002f08:	2b40      	cmp	r3, #64	@ 0x40
 8002f0a:	d86f      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002f0c:	2b30      	cmp	r3, #48	@ 0x30
 8002f0e:	d064      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x15a>
 8002f10:	2b30      	cmp	r3, #48	@ 0x30
 8002f12:	d86b      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002f14:	2b20      	cmp	r3, #32
 8002f16:	d060      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x15a>
 8002f18:	2b20      	cmp	r3, #32
 8002f1a:	d867      	bhi.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d05c      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x15a>
 8002f20:	2b10      	cmp	r3, #16
 8002f22:	d05a      	beq.n	8002fda <HAL_TIM_ConfigClockSource+0x15a>
 8002f24:	e062      	b.n	8002fec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f36:	f000 f974 	bl	8003222 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689b      	ldr	r3, [r3, #8]
 8002f40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	609a      	str	r2, [r3, #8]
      break;
 8002f52:	e04f      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f64:	f000 f95d 	bl	8003222 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f76:	609a      	str	r2, [r3, #8]
      break;
 8002f78:	e03c      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 f8d4 	bl	8003134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2150      	movs	r1, #80	@ 0x50
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 f92b 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002f98:	e02c      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	f000 f8f2 	bl	8003190 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2160      	movs	r1, #96	@ 0x60
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f000 f91b 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002fb8:	e01c      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f000 f8b4 	bl	8003134 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2140      	movs	r1, #64	@ 0x40
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 f90b 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002fd8:	e00c      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	4610      	mov	r0, r2
 8002fe6:	f000 f902 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002fea:	e003      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      break;
 8002ff0:	e000      	b.n	8002ff4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ff2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}

0800300e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bc80      	pop	{r7}
 8003054:	4770      	bx	lr
	...

08003058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003058:	b480      	push	{r7}
 800305a:	b085      	sub	sp, #20
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	4a2f      	ldr	r2, [pc, #188]	@ (8003128 <TIM_Base_SetConfig+0xd0>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003076:	d007      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	4a2c      	ldr	r2, [pc, #176]	@ (800312c <TIM_Base_SetConfig+0xd4>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d003      	beq.n	8003088 <TIM_Base_SetConfig+0x30>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a2b      	ldr	r2, [pc, #172]	@ (8003130 <TIM_Base_SetConfig+0xd8>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d108      	bne.n	800309a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800308e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	4313      	orrs	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a22      	ldr	r2, [pc, #136]	@ (8003128 <TIM_Base_SetConfig+0xd0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d00b      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030a8:	d007      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	4a1f      	ldr	r2, [pc, #124]	@ (800312c <TIM_Base_SetConfig+0xd4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d003      	beq.n	80030ba <TIM_Base_SetConfig+0x62>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003130 <TIM_Base_SetConfig+0xd8>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d108      	bne.n	80030cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a0d      	ldr	r2, [pc, #52]	@ (8003128 <TIM_Base_SetConfig+0xd0>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d103      	bne.n	8003100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	691a      	ldr	r2, [r3, #16]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	d005      	beq.n	800311e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691b      	ldr	r3, [r3, #16]
 8003116:	f023 0201 	bic.w	r2, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	611a      	str	r2, [r3, #16]
  }
}
 800311e:	bf00      	nop
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr
 8003128:	40012c00 	.word	0x40012c00
 800312c:	40000400 	.word	0x40000400
 8003130:	40000800 	.word	0x40000800

08003134 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6a1b      	ldr	r3, [r3, #32]
 800314a:	f023 0201 	bic.w	r2, r3, #1
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800315e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	011b      	lsls	r3, r3, #4
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	f023 030a 	bic.w	r3, r3, #10
 8003170:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003172:	697a      	ldr	r2, [r7, #20]
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	697a      	ldr	r2, [r7, #20]
 8003184:	621a      	str	r2, [r3, #32]
}
 8003186:	bf00      	nop
 8003188:	371c      	adds	r7, #28
 800318a:	46bd      	mov	sp, r7
 800318c:	bc80      	pop	{r7}
 800318e:	4770      	bx	lr

08003190 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003190:	b480      	push	{r7}
 8003192:	b087      	sub	sp, #28
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6a1b      	ldr	r3, [r3, #32]
 80031a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	f023 0210 	bic.w	r2, r3, #16
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80031ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	031b      	lsls	r3, r3, #12
 80031c0:	693a      	ldr	r2, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80031cc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	621a      	str	r2, [r3, #32]
}
 80031e4:	bf00      	nop
 80031e6:	371c      	adds	r7, #28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	f043 0307 	orr.w	r3, r3, #7
 8003210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b087      	sub	sp, #28
 8003226:	af00      	add	r7, sp, #0
 8003228:	60f8      	str	r0, [r7, #12]
 800322a:	60b9      	str	r1, [r7, #8]
 800322c:	607a      	str	r2, [r7, #4]
 800322e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800323c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	021a      	lsls	r2, r3, #8
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	431a      	orrs	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	4313      	orrs	r3, r2
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	4313      	orrs	r3, r2
 800324e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	609a      	str	r2, [r3, #8]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	bc80      	pop	{r7}
 800325e:	4770      	bx	lr

08003260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003274:	2302      	movs	r3, #2
 8003276:	e046      	b.n	8003306 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2202      	movs	r2, #2
 8003284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a16      	ldr	r2, [pc, #88]	@ (8003310 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d00e      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c4:	d009      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a12      	ldr	r2, [pc, #72]	@ (8003314 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d004      	beq.n	80032da <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a10      	ldr	r2, [pc, #64]	@ (8003318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d10c      	bne.n	80032f4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80032e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3714      	adds	r7, #20
 800330a:	46bd      	mov	sp, r7
 800330c:	bc80      	pop	{r7}
 800330e:	4770      	bx	lr
 8003310:	40012c00 	.word	0x40012c00
 8003314:	40000400 	.word	0x40000400
 8003318:	40000800 	.word	0x40000800

0800331c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr

0800332e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e042      	b.n	80033d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd ff24 	bl	80011b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2224      	movs	r2, #36	@ 0x24
 8003370:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68da      	ldr	r2, [r3, #12]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f000 f971 	bl	800366c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	691a      	ldr	r2, [r3, #16]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2220      	movs	r2, #32
 80033c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2220      	movs	r2, #32
 80033cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b08a      	sub	sp, #40	@ 0x28
 80033e4:	af02      	add	r7, sp, #8
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	4613      	mov	r3, r2
 80033ee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b20      	cmp	r3, #32
 80033fe:	d175      	bne.n	80034ec <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d002      	beq.n	800340c <HAL_UART_Transmit+0x2c>
 8003406:	88fb      	ldrh	r3, [r7, #6]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d101      	bne.n	8003410 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e06e      	b.n	80034ee <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2221      	movs	r2, #33	@ 0x21
 800341a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800341e:	f7fe f805 	bl	800142c <HAL_GetTick>
 8003422:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	88fa      	ldrh	r2, [r7, #6]
 8003428:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	88fa      	ldrh	r2, [r7, #6]
 800342e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003438:	d108      	bne.n	800344c <HAL_UART_Transmit+0x6c>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d104      	bne.n	800344c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	61bb      	str	r3, [r7, #24]
 800344a:	e003      	b.n	8003454 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003450:	2300      	movs	r3, #0
 8003452:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003454:	e02e      	b.n	80034b4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	2180      	movs	r1, #128	@ 0x80
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f000 f848 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	2220      	movs	r2, #32
 8003470:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e03a      	b.n	80034ee <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d10b      	bne.n	8003496 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800348c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800348e:	69bb      	ldr	r3, [r7, #24]
 8003490:	3302      	adds	r3, #2
 8003492:	61bb      	str	r3, [r7, #24]
 8003494:	e007      	b.n	80034a6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	781a      	ldrb	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	3301      	adds	r3, #1
 80034a4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	3b01      	subs	r3, #1
 80034ae:	b29a      	uxth	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1cb      	bne.n	8003456 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	2140      	movs	r1, #64	@ 0x40
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f814 	bl	80034f6 <UART_WaitOnFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d005      	beq.n	80034e0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e006      	b.n	80034ee <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}

080034f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80034f6:	b580      	push	{r7, lr}
 80034f8:	b086      	sub	sp, #24
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	60f8      	str	r0, [r7, #12]
 80034fe:	60b9      	str	r1, [r7, #8]
 8003500:	603b      	str	r3, [r7, #0]
 8003502:	4613      	mov	r3, r2
 8003504:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003506:	e03b      	b.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800350e:	d037      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003510:	f7fd ff8c 	bl	800142c <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	6a3a      	ldr	r2, [r7, #32]
 800351c:	429a      	cmp	r2, r3
 800351e:	d302      	bcc.n	8003526 <UART_WaitOnFlagUntilTimeout+0x30>
 8003520:	6a3b      	ldr	r3, [r7, #32]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e03a      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b80      	cmp	r3, #128	@ 0x80
 800353c:	d020      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b40      	cmp	r3, #64	@ 0x40
 8003542:	d01d      	beq.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b08      	cmp	r3, #8
 8003550:	d116      	bne.n	8003580 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003552:	2300      	movs	r3, #0
 8003554:	617b      	str	r3, [r7, #20]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	617b      	str	r3, [r7, #20]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	617b      	str	r3, [r7, #20]
 8003566:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f81d 	bl	80035a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2208      	movs	r2, #8
 8003572:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e00f      	b.n	80035a0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	4013      	ands	r3, r2
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	bf0c      	ite	eq
 8003590:	2301      	moveq	r3, #1
 8003592:	2300      	movne	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	429a      	cmp	r2, r3
 800359c:	d0b4      	beq.n	8003508 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}

080035a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b095      	sub	sp, #84	@ 0x54
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80035c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80035d0:	643a      	str	r2, [r7, #64]	@ 0x40
 80035d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80035d6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3314      	adds	r3, #20
 80035ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	6a3b      	ldr	r3, [r7, #32]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003604:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003606:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800360a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800361c:	2b01      	cmp	r3, #1
 800361e:	d119      	bne.n	8003654 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	330c      	adds	r3, #12
 8003626:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	e853 3f00 	ldrex	r3, [r3]
 800362e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	f023 0310 	bic.w	r3, r3, #16
 8003636:	647b      	str	r3, [r7, #68]	@ 0x44
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	330c      	adds	r3, #12
 800363e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003640:	61ba      	str	r2, [r7, #24]
 8003642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003644:	6979      	ldr	r1, [r7, #20]
 8003646:	69ba      	ldr	r2, [r7, #24]
 8003648:	e841 2300 	strex	r3, r2, [r1]
 800364c:	613b      	str	r3, [r7, #16]
   return(result);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003662:	bf00      	nop
 8003664:	3754      	adds	r7, #84	@ 0x54
 8003666:	46bd      	mov	sp, r7
 8003668:	bc80      	pop	{r7}
 800366a:	4770      	bx	lr

0800366c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	68da      	ldr	r2, [r3, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	430a      	orrs	r2, r1
 8003688:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	689a      	ldr	r2, [r3, #8]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	431a      	orrs	r2, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	695b      	ldr	r3, [r3, #20]
 8003698:	4313      	orrs	r3, r2
 800369a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80036a6:	f023 030c 	bic.w	r3, r3, #12
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	6812      	ldr	r2, [r2, #0]
 80036ae:	68b9      	ldr	r1, [r7, #8]
 80036b0:	430b      	orrs	r3, r1
 80036b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	699a      	ldr	r2, [r3, #24]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	430a      	orrs	r2, r1
 80036c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003780 <UART_SetConfig+0x114>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d103      	bne.n	80036dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7fe ff90 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 80036d8:	60f8      	str	r0, [r7, #12]
 80036da:	e002      	b.n	80036e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80036dc:	f7fe ff78 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80036e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80036e2:	68fa      	ldr	r2, [r7, #12]
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009a      	lsls	r2, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <UART_SetConfig+0x118>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	0119      	lsls	r1, r3, #4
 8003702:	68fa      	ldr	r2, [r7, #12]
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	009a      	lsls	r2, r3, #2
 800370c:	441a      	add	r2, r3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	fbb2 f2f3 	udiv	r2, r2, r3
 8003718:	4b1a      	ldr	r3, [pc, #104]	@ (8003784 <UART_SetConfig+0x118>)
 800371a:	fba3 0302 	umull	r0, r3, r3, r2
 800371e:	095b      	lsrs	r3, r3, #5
 8003720:	2064      	movs	r0, #100	@ 0x64
 8003722:	fb00 f303 	mul.w	r3, r0, r3
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	3332      	adds	r3, #50	@ 0x32
 800372c:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <UART_SetConfig+0x118>)
 800372e:	fba2 2303 	umull	r2, r3, r2, r3
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003738:	4419      	add	r1, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009a      	lsls	r2, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003750:	4b0c      	ldr	r3, [pc, #48]	@ (8003784 <UART_SetConfig+0x118>)
 8003752:	fba3 0302 	umull	r0, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	2064      	movs	r0, #100	@ 0x64
 800375a:	fb00 f303 	mul.w	r3, r0, r3
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	3332      	adds	r3, #50	@ 0x32
 8003764:	4a07      	ldr	r2, [pc, #28]	@ (8003784 <UART_SetConfig+0x118>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	095b      	lsrs	r3, r3, #5
 800376c:	f003 020f 	and.w	r2, r3, #15
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	440a      	add	r2, r1
 8003776:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40013800 	.word	0x40013800
 8003784:	51eb851f 	.word	0x51eb851f

08003788 <sniprintf>:
 8003788:	b40c      	push	{r2, r3}
 800378a:	b530      	push	{r4, r5, lr}
 800378c:	4b18      	ldr	r3, [pc, #96]	@ (80037f0 <sniprintf+0x68>)
 800378e:	1e0c      	subs	r4, r1, #0
 8003790:	681d      	ldr	r5, [r3, #0]
 8003792:	b09d      	sub	sp, #116	@ 0x74
 8003794:	da08      	bge.n	80037a8 <sniprintf+0x20>
 8003796:	238b      	movs	r3, #139	@ 0x8b
 8003798:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800379c:	602b      	str	r3, [r5, #0]
 800379e:	b01d      	add	sp, #116	@ 0x74
 80037a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80037a4:	b002      	add	sp, #8
 80037a6:	4770      	bx	lr
 80037a8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80037ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 80037b0:	f04f 0300 	mov.w	r3, #0
 80037b4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80037b6:	bf0c      	ite	eq
 80037b8:	4623      	moveq	r3, r4
 80037ba:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80037be:	9304      	str	r3, [sp, #16]
 80037c0:	9307      	str	r3, [sp, #28]
 80037c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037c6:	9002      	str	r0, [sp, #8]
 80037c8:	9006      	str	r0, [sp, #24]
 80037ca:	f8ad 3016 	strh.w	r3, [sp, #22]
 80037ce:	4628      	mov	r0, r5
 80037d0:	ab21      	add	r3, sp, #132	@ 0x84
 80037d2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80037d4:	a902      	add	r1, sp, #8
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	f000 f9a0 	bl	8003b1c <_svfiprintf_r>
 80037dc:	1c43      	adds	r3, r0, #1
 80037de:	bfbc      	itt	lt
 80037e0:	238b      	movlt	r3, #139	@ 0x8b
 80037e2:	602b      	strlt	r3, [r5, #0]
 80037e4:	2c00      	cmp	r4, #0
 80037e6:	d0da      	beq.n	800379e <sniprintf+0x16>
 80037e8:	2200      	movs	r2, #0
 80037ea:	9b02      	ldr	r3, [sp, #8]
 80037ec:	701a      	strb	r2, [r3, #0]
 80037ee:	e7d6      	b.n	800379e <sniprintf+0x16>
 80037f0:	20000018 	.word	0x20000018

080037f4 <memset>:
 80037f4:	4603      	mov	r3, r0
 80037f6:	4402      	add	r2, r0
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d100      	bne.n	80037fe <memset+0xa>
 80037fc:	4770      	bx	lr
 80037fe:	f803 1b01 	strb.w	r1, [r3], #1
 8003802:	e7f9      	b.n	80037f8 <memset+0x4>

08003804 <__errno>:
 8003804:	4b01      	ldr	r3, [pc, #4]	@ (800380c <__errno+0x8>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	20000018 	.word	0x20000018

08003810 <__libc_init_array>:
 8003810:	b570      	push	{r4, r5, r6, lr}
 8003812:	2600      	movs	r6, #0
 8003814:	4d0c      	ldr	r5, [pc, #48]	@ (8003848 <__libc_init_array+0x38>)
 8003816:	4c0d      	ldr	r4, [pc, #52]	@ (800384c <__libc_init_array+0x3c>)
 8003818:	1b64      	subs	r4, r4, r5
 800381a:	10a4      	asrs	r4, r4, #2
 800381c:	42a6      	cmp	r6, r4
 800381e:	d109      	bne.n	8003834 <__libc_init_array+0x24>
 8003820:	f000 fc76 	bl	8004110 <_init>
 8003824:	2600      	movs	r6, #0
 8003826:	4d0a      	ldr	r5, [pc, #40]	@ (8003850 <__libc_init_array+0x40>)
 8003828:	4c0a      	ldr	r4, [pc, #40]	@ (8003854 <__libc_init_array+0x44>)
 800382a:	1b64      	subs	r4, r4, r5
 800382c:	10a4      	asrs	r4, r4, #2
 800382e:	42a6      	cmp	r6, r4
 8003830:	d105      	bne.n	800383e <__libc_init_array+0x2e>
 8003832:	bd70      	pop	{r4, r5, r6, pc}
 8003834:	f855 3b04 	ldr.w	r3, [r5], #4
 8003838:	4798      	blx	r3
 800383a:	3601      	adds	r6, #1
 800383c:	e7ee      	b.n	800381c <__libc_init_array+0xc>
 800383e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003842:	4798      	blx	r3
 8003844:	3601      	adds	r6, #1
 8003846:	e7f2      	b.n	800382e <__libc_init_array+0x1e>
 8003848:	080041ec 	.word	0x080041ec
 800384c:	080041ec 	.word	0x080041ec
 8003850:	080041ec 	.word	0x080041ec
 8003854:	080041f0 	.word	0x080041f0

08003858 <__retarget_lock_acquire_recursive>:
 8003858:	4770      	bx	lr

0800385a <__retarget_lock_release_recursive>:
 800385a:	4770      	bx	lr

0800385c <memcpy>:
 800385c:	440a      	add	r2, r1
 800385e:	4291      	cmp	r1, r2
 8003860:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8003864:	d100      	bne.n	8003868 <memcpy+0xc>
 8003866:	4770      	bx	lr
 8003868:	b510      	push	{r4, lr}
 800386a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800386e:	4291      	cmp	r1, r2
 8003870:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003874:	d1f9      	bne.n	800386a <memcpy+0xe>
 8003876:	bd10      	pop	{r4, pc}

08003878 <_free_r>:
 8003878:	b538      	push	{r3, r4, r5, lr}
 800387a:	4605      	mov	r5, r0
 800387c:	2900      	cmp	r1, #0
 800387e:	d040      	beq.n	8003902 <_free_r+0x8a>
 8003880:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003884:	1f0c      	subs	r4, r1, #4
 8003886:	2b00      	cmp	r3, #0
 8003888:	bfb8      	it	lt
 800388a:	18e4      	addlt	r4, r4, r3
 800388c:	f000 f8de 	bl	8003a4c <__malloc_lock>
 8003890:	4a1c      	ldr	r2, [pc, #112]	@ (8003904 <_free_r+0x8c>)
 8003892:	6813      	ldr	r3, [r2, #0]
 8003894:	b933      	cbnz	r3, 80038a4 <_free_r+0x2c>
 8003896:	6063      	str	r3, [r4, #4]
 8003898:	6014      	str	r4, [r2, #0]
 800389a:	4628      	mov	r0, r5
 800389c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a0:	f000 b8da 	b.w	8003a58 <__malloc_unlock>
 80038a4:	42a3      	cmp	r3, r4
 80038a6:	d908      	bls.n	80038ba <_free_r+0x42>
 80038a8:	6820      	ldr	r0, [r4, #0]
 80038aa:	1821      	adds	r1, r4, r0
 80038ac:	428b      	cmp	r3, r1
 80038ae:	bf01      	itttt	eq
 80038b0:	6819      	ldreq	r1, [r3, #0]
 80038b2:	685b      	ldreq	r3, [r3, #4]
 80038b4:	1809      	addeq	r1, r1, r0
 80038b6:	6021      	streq	r1, [r4, #0]
 80038b8:	e7ed      	b.n	8003896 <_free_r+0x1e>
 80038ba:	461a      	mov	r2, r3
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	b10b      	cbz	r3, 80038c4 <_free_r+0x4c>
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d9fa      	bls.n	80038ba <_free_r+0x42>
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	1850      	adds	r0, r2, r1
 80038c8:	42a0      	cmp	r0, r4
 80038ca:	d10b      	bne.n	80038e4 <_free_r+0x6c>
 80038cc:	6820      	ldr	r0, [r4, #0]
 80038ce:	4401      	add	r1, r0
 80038d0:	1850      	adds	r0, r2, r1
 80038d2:	4283      	cmp	r3, r0
 80038d4:	6011      	str	r1, [r2, #0]
 80038d6:	d1e0      	bne.n	800389a <_free_r+0x22>
 80038d8:	6818      	ldr	r0, [r3, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	4408      	add	r0, r1
 80038de:	6010      	str	r0, [r2, #0]
 80038e0:	6053      	str	r3, [r2, #4]
 80038e2:	e7da      	b.n	800389a <_free_r+0x22>
 80038e4:	d902      	bls.n	80038ec <_free_r+0x74>
 80038e6:	230c      	movs	r3, #12
 80038e8:	602b      	str	r3, [r5, #0]
 80038ea:	e7d6      	b.n	800389a <_free_r+0x22>
 80038ec:	6820      	ldr	r0, [r4, #0]
 80038ee:	1821      	adds	r1, r4, r0
 80038f0:	428b      	cmp	r3, r1
 80038f2:	bf01      	itttt	eq
 80038f4:	6819      	ldreq	r1, [r3, #0]
 80038f6:	685b      	ldreq	r3, [r3, #4]
 80038f8:	1809      	addeq	r1, r1, r0
 80038fa:	6021      	streq	r1, [r4, #0]
 80038fc:	6063      	str	r3, [r4, #4]
 80038fe:	6054      	str	r4, [r2, #4]
 8003900:	e7cb      	b.n	800389a <_free_r+0x22>
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	200002e4 	.word	0x200002e4

08003908 <sbrk_aligned>:
 8003908:	b570      	push	{r4, r5, r6, lr}
 800390a:	4e0f      	ldr	r6, [pc, #60]	@ (8003948 <sbrk_aligned+0x40>)
 800390c:	460c      	mov	r4, r1
 800390e:	6831      	ldr	r1, [r6, #0]
 8003910:	4605      	mov	r5, r0
 8003912:	b911      	cbnz	r1, 800391a <sbrk_aligned+0x12>
 8003914:	f000 fba8 	bl	8004068 <_sbrk_r>
 8003918:	6030      	str	r0, [r6, #0]
 800391a:	4621      	mov	r1, r4
 800391c:	4628      	mov	r0, r5
 800391e:	f000 fba3 	bl	8004068 <_sbrk_r>
 8003922:	1c43      	adds	r3, r0, #1
 8003924:	d103      	bne.n	800392e <sbrk_aligned+0x26>
 8003926:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800392a:	4620      	mov	r0, r4
 800392c:	bd70      	pop	{r4, r5, r6, pc}
 800392e:	1cc4      	adds	r4, r0, #3
 8003930:	f024 0403 	bic.w	r4, r4, #3
 8003934:	42a0      	cmp	r0, r4
 8003936:	d0f8      	beq.n	800392a <sbrk_aligned+0x22>
 8003938:	1a21      	subs	r1, r4, r0
 800393a:	4628      	mov	r0, r5
 800393c:	f000 fb94 	bl	8004068 <_sbrk_r>
 8003940:	3001      	adds	r0, #1
 8003942:	d1f2      	bne.n	800392a <sbrk_aligned+0x22>
 8003944:	e7ef      	b.n	8003926 <sbrk_aligned+0x1e>
 8003946:	bf00      	nop
 8003948:	200002e0 	.word	0x200002e0

0800394c <_malloc_r>:
 800394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003950:	1ccd      	adds	r5, r1, #3
 8003952:	f025 0503 	bic.w	r5, r5, #3
 8003956:	3508      	adds	r5, #8
 8003958:	2d0c      	cmp	r5, #12
 800395a:	bf38      	it	cc
 800395c:	250c      	movcc	r5, #12
 800395e:	2d00      	cmp	r5, #0
 8003960:	4606      	mov	r6, r0
 8003962:	db01      	blt.n	8003968 <_malloc_r+0x1c>
 8003964:	42a9      	cmp	r1, r5
 8003966:	d904      	bls.n	8003972 <_malloc_r+0x26>
 8003968:	230c      	movs	r3, #12
 800396a:	6033      	str	r3, [r6, #0]
 800396c:	2000      	movs	r0, #0
 800396e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003972:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a48 <_malloc_r+0xfc>
 8003976:	f000 f869 	bl	8003a4c <__malloc_lock>
 800397a:	f8d8 3000 	ldr.w	r3, [r8]
 800397e:	461c      	mov	r4, r3
 8003980:	bb44      	cbnz	r4, 80039d4 <_malloc_r+0x88>
 8003982:	4629      	mov	r1, r5
 8003984:	4630      	mov	r0, r6
 8003986:	f7ff ffbf 	bl	8003908 <sbrk_aligned>
 800398a:	1c43      	adds	r3, r0, #1
 800398c:	4604      	mov	r4, r0
 800398e:	d158      	bne.n	8003a42 <_malloc_r+0xf6>
 8003990:	f8d8 4000 	ldr.w	r4, [r8]
 8003994:	4627      	mov	r7, r4
 8003996:	2f00      	cmp	r7, #0
 8003998:	d143      	bne.n	8003a22 <_malloc_r+0xd6>
 800399a:	2c00      	cmp	r4, #0
 800399c:	d04b      	beq.n	8003a36 <_malloc_r+0xea>
 800399e:	6823      	ldr	r3, [r4, #0]
 80039a0:	4639      	mov	r1, r7
 80039a2:	4630      	mov	r0, r6
 80039a4:	eb04 0903 	add.w	r9, r4, r3
 80039a8:	f000 fb5e 	bl	8004068 <_sbrk_r>
 80039ac:	4581      	cmp	r9, r0
 80039ae:	d142      	bne.n	8003a36 <_malloc_r+0xea>
 80039b0:	6821      	ldr	r1, [r4, #0]
 80039b2:	4630      	mov	r0, r6
 80039b4:	1a6d      	subs	r5, r5, r1
 80039b6:	4629      	mov	r1, r5
 80039b8:	f7ff ffa6 	bl	8003908 <sbrk_aligned>
 80039bc:	3001      	adds	r0, #1
 80039be:	d03a      	beq.n	8003a36 <_malloc_r+0xea>
 80039c0:	6823      	ldr	r3, [r4, #0]
 80039c2:	442b      	add	r3, r5
 80039c4:	6023      	str	r3, [r4, #0]
 80039c6:	f8d8 3000 	ldr.w	r3, [r8]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	bb62      	cbnz	r2, 8003a28 <_malloc_r+0xdc>
 80039ce:	f8c8 7000 	str.w	r7, [r8]
 80039d2:	e00f      	b.n	80039f4 <_malloc_r+0xa8>
 80039d4:	6822      	ldr	r2, [r4, #0]
 80039d6:	1b52      	subs	r2, r2, r5
 80039d8:	d420      	bmi.n	8003a1c <_malloc_r+0xd0>
 80039da:	2a0b      	cmp	r2, #11
 80039dc:	d917      	bls.n	8003a0e <_malloc_r+0xc2>
 80039de:	1961      	adds	r1, r4, r5
 80039e0:	42a3      	cmp	r3, r4
 80039e2:	6025      	str	r5, [r4, #0]
 80039e4:	bf18      	it	ne
 80039e6:	6059      	strne	r1, [r3, #4]
 80039e8:	6863      	ldr	r3, [r4, #4]
 80039ea:	bf08      	it	eq
 80039ec:	f8c8 1000 	streq.w	r1, [r8]
 80039f0:	5162      	str	r2, [r4, r5]
 80039f2:	604b      	str	r3, [r1, #4]
 80039f4:	4630      	mov	r0, r6
 80039f6:	f000 f82f 	bl	8003a58 <__malloc_unlock>
 80039fa:	f104 000b 	add.w	r0, r4, #11
 80039fe:	1d23      	adds	r3, r4, #4
 8003a00:	f020 0007 	bic.w	r0, r0, #7
 8003a04:	1ac2      	subs	r2, r0, r3
 8003a06:	bf1c      	itt	ne
 8003a08:	1a1b      	subne	r3, r3, r0
 8003a0a:	50a3      	strne	r3, [r4, r2]
 8003a0c:	e7af      	b.n	800396e <_malloc_r+0x22>
 8003a0e:	6862      	ldr	r2, [r4, #4]
 8003a10:	42a3      	cmp	r3, r4
 8003a12:	bf0c      	ite	eq
 8003a14:	f8c8 2000 	streq.w	r2, [r8]
 8003a18:	605a      	strne	r2, [r3, #4]
 8003a1a:	e7eb      	b.n	80039f4 <_malloc_r+0xa8>
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	6864      	ldr	r4, [r4, #4]
 8003a20:	e7ae      	b.n	8003980 <_malloc_r+0x34>
 8003a22:	463c      	mov	r4, r7
 8003a24:	687f      	ldr	r7, [r7, #4]
 8003a26:	e7b6      	b.n	8003996 <_malloc_r+0x4a>
 8003a28:	461a      	mov	r2, r3
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	d1fb      	bne.n	8003a28 <_malloc_r+0xdc>
 8003a30:	2300      	movs	r3, #0
 8003a32:	6053      	str	r3, [r2, #4]
 8003a34:	e7de      	b.n	80039f4 <_malloc_r+0xa8>
 8003a36:	230c      	movs	r3, #12
 8003a38:	4630      	mov	r0, r6
 8003a3a:	6033      	str	r3, [r6, #0]
 8003a3c:	f000 f80c 	bl	8003a58 <__malloc_unlock>
 8003a40:	e794      	b.n	800396c <_malloc_r+0x20>
 8003a42:	6005      	str	r5, [r0, #0]
 8003a44:	e7d6      	b.n	80039f4 <_malloc_r+0xa8>
 8003a46:	bf00      	nop
 8003a48:	200002e4 	.word	0x200002e4

08003a4c <__malloc_lock>:
 8003a4c:	4801      	ldr	r0, [pc, #4]	@ (8003a54 <__malloc_lock+0x8>)
 8003a4e:	f7ff bf03 	b.w	8003858 <__retarget_lock_acquire_recursive>
 8003a52:	bf00      	nop
 8003a54:	200002dc 	.word	0x200002dc

08003a58 <__malloc_unlock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_unlock+0x8>)
 8003a5a:	f7ff befe 	b.w	800385a <__retarget_lock_release_recursive>
 8003a5e:	bf00      	nop
 8003a60:	200002dc 	.word	0x200002dc

08003a64 <__ssputs_r>:
 8003a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a68:	461f      	mov	r7, r3
 8003a6a:	688e      	ldr	r6, [r1, #8]
 8003a6c:	4682      	mov	sl, r0
 8003a6e:	42be      	cmp	r6, r7
 8003a70:	460c      	mov	r4, r1
 8003a72:	4690      	mov	r8, r2
 8003a74:	680b      	ldr	r3, [r1, #0]
 8003a76:	d82d      	bhi.n	8003ad4 <__ssputs_r+0x70>
 8003a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a80:	d026      	beq.n	8003ad0 <__ssputs_r+0x6c>
 8003a82:	6965      	ldr	r5, [r4, #20]
 8003a84:	6909      	ldr	r1, [r1, #16]
 8003a86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a8a:	eba3 0901 	sub.w	r9, r3, r1
 8003a8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a92:	1c7b      	adds	r3, r7, #1
 8003a94:	444b      	add	r3, r9
 8003a96:	106d      	asrs	r5, r5, #1
 8003a98:	429d      	cmp	r5, r3
 8003a9a:	bf38      	it	cc
 8003a9c:	461d      	movcc	r5, r3
 8003a9e:	0553      	lsls	r3, r2, #21
 8003aa0:	d527      	bpl.n	8003af2 <__ssputs_r+0x8e>
 8003aa2:	4629      	mov	r1, r5
 8003aa4:	f7ff ff52 	bl	800394c <_malloc_r>
 8003aa8:	4606      	mov	r6, r0
 8003aaa:	b360      	cbz	r0, 8003b06 <__ssputs_r+0xa2>
 8003aac:	464a      	mov	r2, r9
 8003aae:	6921      	ldr	r1, [r4, #16]
 8003ab0:	f7ff fed4 	bl	800385c <memcpy>
 8003ab4:	89a3      	ldrh	r3, [r4, #12]
 8003ab6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003aba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003abe:	81a3      	strh	r3, [r4, #12]
 8003ac0:	6126      	str	r6, [r4, #16]
 8003ac2:	444e      	add	r6, r9
 8003ac4:	6026      	str	r6, [r4, #0]
 8003ac6:	463e      	mov	r6, r7
 8003ac8:	6165      	str	r5, [r4, #20]
 8003aca:	eba5 0509 	sub.w	r5, r5, r9
 8003ace:	60a5      	str	r5, [r4, #8]
 8003ad0:	42be      	cmp	r6, r7
 8003ad2:	d900      	bls.n	8003ad6 <__ssputs_r+0x72>
 8003ad4:	463e      	mov	r6, r7
 8003ad6:	4632      	mov	r2, r6
 8003ad8:	4641      	mov	r1, r8
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	f000 faaa 	bl	8004034 <memmove>
 8003ae0:	2000      	movs	r0, #0
 8003ae2:	68a3      	ldr	r3, [r4, #8]
 8003ae4:	1b9b      	subs	r3, r3, r6
 8003ae6:	60a3      	str	r3, [r4, #8]
 8003ae8:	6823      	ldr	r3, [r4, #0]
 8003aea:	4433      	add	r3, r6
 8003aec:	6023      	str	r3, [r4, #0]
 8003aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af2:	462a      	mov	r2, r5
 8003af4:	f000 fad6 	bl	80040a4 <_realloc_r>
 8003af8:	4606      	mov	r6, r0
 8003afa:	2800      	cmp	r0, #0
 8003afc:	d1e0      	bne.n	8003ac0 <__ssputs_r+0x5c>
 8003afe:	4650      	mov	r0, sl
 8003b00:	6921      	ldr	r1, [r4, #16]
 8003b02:	f7ff feb9 	bl	8003878 <_free_r>
 8003b06:	230c      	movs	r3, #12
 8003b08:	f8ca 3000 	str.w	r3, [sl]
 8003b0c:	89a3      	ldrh	r3, [r4, #12]
 8003b0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b16:	81a3      	strh	r3, [r4, #12]
 8003b18:	e7e9      	b.n	8003aee <__ssputs_r+0x8a>
	...

08003b1c <_svfiprintf_r>:
 8003b1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b20:	4698      	mov	r8, r3
 8003b22:	898b      	ldrh	r3, [r1, #12]
 8003b24:	4607      	mov	r7, r0
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	460d      	mov	r5, r1
 8003b2a:	4614      	mov	r4, r2
 8003b2c:	b09d      	sub	sp, #116	@ 0x74
 8003b2e:	d510      	bpl.n	8003b52 <_svfiprintf_r+0x36>
 8003b30:	690b      	ldr	r3, [r1, #16]
 8003b32:	b973      	cbnz	r3, 8003b52 <_svfiprintf_r+0x36>
 8003b34:	2140      	movs	r1, #64	@ 0x40
 8003b36:	f7ff ff09 	bl	800394c <_malloc_r>
 8003b3a:	6028      	str	r0, [r5, #0]
 8003b3c:	6128      	str	r0, [r5, #16]
 8003b3e:	b930      	cbnz	r0, 8003b4e <_svfiprintf_r+0x32>
 8003b40:	230c      	movs	r3, #12
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b48:	b01d      	add	sp, #116	@ 0x74
 8003b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4e:	2340      	movs	r3, #64	@ 0x40
 8003b50:	616b      	str	r3, [r5, #20]
 8003b52:	2300      	movs	r3, #0
 8003b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b56:	2320      	movs	r3, #32
 8003b58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b5c:	2330      	movs	r3, #48	@ 0x30
 8003b5e:	f04f 0901 	mov.w	r9, #1
 8003b62:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b66:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003d00 <_svfiprintf_r+0x1e4>
 8003b6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b6e:	4623      	mov	r3, r4
 8003b70:	469a      	mov	sl, r3
 8003b72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b76:	b10a      	cbz	r2, 8003b7c <_svfiprintf_r+0x60>
 8003b78:	2a25      	cmp	r2, #37	@ 0x25
 8003b7a:	d1f9      	bne.n	8003b70 <_svfiprintf_r+0x54>
 8003b7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003b80:	d00b      	beq.n	8003b9a <_svfiprintf_r+0x7e>
 8003b82:	465b      	mov	r3, fp
 8003b84:	4622      	mov	r2, r4
 8003b86:	4629      	mov	r1, r5
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f7ff ff6b 	bl	8003a64 <__ssputs_r>
 8003b8e:	3001      	adds	r0, #1
 8003b90:	f000 80a7 	beq.w	8003ce2 <_svfiprintf_r+0x1c6>
 8003b94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b96:	445a      	add	r2, fp
 8003b98:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 809f 	beq.w	8003ce2 <_svfiprintf_r+0x1c6>
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bae:	f10a 0a01 	add.w	sl, sl, #1
 8003bb2:	9304      	str	r3, [sp, #16]
 8003bb4:	9307      	str	r3, [sp, #28]
 8003bb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bba:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bbc:	4654      	mov	r4, sl
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc4:	484e      	ldr	r0, [pc, #312]	@ (8003d00 <_svfiprintf_r+0x1e4>)
 8003bc6:	f000 fa5f 	bl	8004088 <memchr>
 8003bca:	9a04      	ldr	r2, [sp, #16]
 8003bcc:	b9d8      	cbnz	r0, 8003c06 <_svfiprintf_r+0xea>
 8003bce:	06d0      	lsls	r0, r2, #27
 8003bd0:	bf44      	itt	mi
 8003bd2:	2320      	movmi	r3, #32
 8003bd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bd8:	0711      	lsls	r1, r2, #28
 8003bda:	bf44      	itt	mi
 8003bdc:	232b      	movmi	r3, #43	@ 0x2b
 8003bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003be2:	f89a 3000 	ldrb.w	r3, [sl]
 8003be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be8:	d015      	beq.n	8003c16 <_svfiprintf_r+0xfa>
 8003bea:	4654      	mov	r4, sl
 8003bec:	2000      	movs	r0, #0
 8003bee:	f04f 0c0a 	mov.w	ip, #10
 8003bf2:	9a07      	ldr	r2, [sp, #28]
 8003bf4:	4621      	mov	r1, r4
 8003bf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bfa:	3b30      	subs	r3, #48	@ 0x30
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d94b      	bls.n	8003c98 <_svfiprintf_r+0x17c>
 8003c00:	b1b0      	cbz	r0, 8003c30 <_svfiprintf_r+0x114>
 8003c02:	9207      	str	r2, [sp, #28]
 8003c04:	e014      	b.n	8003c30 <_svfiprintf_r+0x114>
 8003c06:	eba0 0308 	sub.w	r3, r0, r8
 8003c0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	46a2      	mov	sl, r4
 8003c12:	9304      	str	r3, [sp, #16]
 8003c14:	e7d2      	b.n	8003bbc <_svfiprintf_r+0xa0>
 8003c16:	9b03      	ldr	r3, [sp, #12]
 8003c18:	1d19      	adds	r1, r3, #4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	9103      	str	r1, [sp, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	bfbb      	ittet	lt
 8003c22:	425b      	neglt	r3, r3
 8003c24:	f042 0202 	orrlt.w	r2, r2, #2
 8003c28:	9307      	strge	r3, [sp, #28]
 8003c2a:	9307      	strlt	r3, [sp, #28]
 8003c2c:	bfb8      	it	lt
 8003c2e:	9204      	strlt	r2, [sp, #16]
 8003c30:	7823      	ldrb	r3, [r4, #0]
 8003c32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c34:	d10a      	bne.n	8003c4c <_svfiprintf_r+0x130>
 8003c36:	7863      	ldrb	r3, [r4, #1]
 8003c38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c3a:	d132      	bne.n	8003ca2 <_svfiprintf_r+0x186>
 8003c3c:	9b03      	ldr	r3, [sp, #12]
 8003c3e:	3402      	adds	r4, #2
 8003c40:	1d1a      	adds	r2, r3, #4
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	9203      	str	r2, [sp, #12]
 8003c46:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c4a:	9305      	str	r3, [sp, #20]
 8003c4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d04 <_svfiprintf_r+0x1e8>
 8003c50:	2203      	movs	r2, #3
 8003c52:	4650      	mov	r0, sl
 8003c54:	7821      	ldrb	r1, [r4, #0]
 8003c56:	f000 fa17 	bl	8004088 <memchr>
 8003c5a:	b138      	cbz	r0, 8003c6c <_svfiprintf_r+0x150>
 8003c5c:	2240      	movs	r2, #64	@ 0x40
 8003c5e:	9b04      	ldr	r3, [sp, #16]
 8003c60:	eba0 000a 	sub.w	r0, r0, sl
 8003c64:	4082      	lsls	r2, r0
 8003c66:	4313      	orrs	r3, r2
 8003c68:	3401      	adds	r4, #1
 8003c6a:	9304      	str	r3, [sp, #16]
 8003c6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c70:	2206      	movs	r2, #6
 8003c72:	4825      	ldr	r0, [pc, #148]	@ (8003d08 <_svfiprintf_r+0x1ec>)
 8003c74:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c78:	f000 fa06 	bl	8004088 <memchr>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d036      	beq.n	8003cee <_svfiprintf_r+0x1d2>
 8003c80:	4b22      	ldr	r3, [pc, #136]	@ (8003d0c <_svfiprintf_r+0x1f0>)
 8003c82:	bb1b      	cbnz	r3, 8003ccc <_svfiprintf_r+0x1b0>
 8003c84:	9b03      	ldr	r3, [sp, #12]
 8003c86:	3307      	adds	r3, #7
 8003c88:	f023 0307 	bic.w	r3, r3, #7
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	9303      	str	r3, [sp, #12]
 8003c90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c92:	4433      	add	r3, r6
 8003c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c96:	e76a      	b.n	8003b6e <_svfiprintf_r+0x52>
 8003c98:	460c      	mov	r4, r1
 8003c9a:	2001      	movs	r0, #1
 8003c9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca0:	e7a8      	b.n	8003bf4 <_svfiprintf_r+0xd8>
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	f04f 0c0a 	mov.w	ip, #10
 8003ca8:	4619      	mov	r1, r3
 8003caa:	3401      	adds	r4, #1
 8003cac:	9305      	str	r3, [sp, #20]
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb4:	3a30      	subs	r2, #48	@ 0x30
 8003cb6:	2a09      	cmp	r2, #9
 8003cb8:	d903      	bls.n	8003cc2 <_svfiprintf_r+0x1a6>
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0c6      	beq.n	8003c4c <_svfiprintf_r+0x130>
 8003cbe:	9105      	str	r1, [sp, #20]
 8003cc0:	e7c4      	b.n	8003c4c <_svfiprintf_r+0x130>
 8003cc2:	4604      	mov	r4, r0
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cca:	e7f0      	b.n	8003cae <_svfiprintf_r+0x192>
 8003ccc:	ab03      	add	r3, sp, #12
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	4638      	mov	r0, r7
 8003cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003d10 <_svfiprintf_r+0x1f4>)
 8003cd6:	a904      	add	r1, sp, #16
 8003cd8:	f3af 8000 	nop.w
 8003cdc:	1c42      	adds	r2, r0, #1
 8003cde:	4606      	mov	r6, r0
 8003ce0:	d1d6      	bne.n	8003c90 <_svfiprintf_r+0x174>
 8003ce2:	89ab      	ldrh	r3, [r5, #12]
 8003ce4:	065b      	lsls	r3, r3, #25
 8003ce6:	f53f af2d 	bmi.w	8003b44 <_svfiprintf_r+0x28>
 8003cea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cec:	e72c      	b.n	8003b48 <_svfiprintf_r+0x2c>
 8003cee:	ab03      	add	r3, sp, #12
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	462a      	mov	r2, r5
 8003cf4:	4638      	mov	r0, r7
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <_svfiprintf_r+0x1f4>)
 8003cf8:	a904      	add	r1, sp, #16
 8003cfa:	f000 f87d 	bl	8003df8 <_printf_i>
 8003cfe:	e7ed      	b.n	8003cdc <_svfiprintf_r+0x1c0>
 8003d00:	080041b6 	.word	0x080041b6
 8003d04:	080041bc 	.word	0x080041bc
 8003d08:	080041c0 	.word	0x080041c0
 8003d0c:	00000000 	.word	0x00000000
 8003d10:	08003a65 	.word	0x08003a65

08003d14 <_printf_common>:
 8003d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d18:	4616      	mov	r6, r2
 8003d1a:	4698      	mov	r8, r3
 8003d1c:	688a      	ldr	r2, [r1, #8]
 8003d1e:	690b      	ldr	r3, [r1, #16]
 8003d20:	4607      	mov	r7, r0
 8003d22:	4293      	cmp	r3, r2
 8003d24:	bfb8      	it	lt
 8003d26:	4613      	movlt	r3, r2
 8003d28:	6033      	str	r3, [r6, #0]
 8003d2a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d2e:	460c      	mov	r4, r1
 8003d30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d34:	b10a      	cbz	r2, 8003d3a <_printf_common+0x26>
 8003d36:	3301      	adds	r3, #1
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	0699      	lsls	r1, r3, #26
 8003d3e:	bf42      	ittt	mi
 8003d40:	6833      	ldrmi	r3, [r6, #0]
 8003d42:	3302      	addmi	r3, #2
 8003d44:	6033      	strmi	r3, [r6, #0]
 8003d46:	6825      	ldr	r5, [r4, #0]
 8003d48:	f015 0506 	ands.w	r5, r5, #6
 8003d4c:	d106      	bne.n	8003d5c <_printf_common+0x48>
 8003d4e:	f104 0a19 	add.w	sl, r4, #25
 8003d52:	68e3      	ldr	r3, [r4, #12]
 8003d54:	6832      	ldr	r2, [r6, #0]
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	42ab      	cmp	r3, r5
 8003d5a:	dc2b      	bgt.n	8003db4 <_printf_common+0xa0>
 8003d5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d60:	6822      	ldr	r2, [r4, #0]
 8003d62:	3b00      	subs	r3, #0
 8003d64:	bf18      	it	ne
 8003d66:	2301      	movne	r3, #1
 8003d68:	0692      	lsls	r2, r2, #26
 8003d6a:	d430      	bmi.n	8003dce <_printf_common+0xba>
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	4638      	mov	r0, r7
 8003d70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d74:	47c8      	blx	r9
 8003d76:	3001      	adds	r0, #1
 8003d78:	d023      	beq.n	8003dc2 <_printf_common+0xae>
 8003d7a:	6823      	ldr	r3, [r4, #0]
 8003d7c:	6922      	ldr	r2, [r4, #16]
 8003d7e:	f003 0306 	and.w	r3, r3, #6
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	bf14      	ite	ne
 8003d86:	2500      	movne	r5, #0
 8003d88:	6833      	ldreq	r3, [r6, #0]
 8003d8a:	f04f 0600 	mov.w	r6, #0
 8003d8e:	bf08      	it	eq
 8003d90:	68e5      	ldreq	r5, [r4, #12]
 8003d92:	f104 041a 	add.w	r4, r4, #26
 8003d96:	bf08      	it	eq
 8003d98:	1aed      	subeq	r5, r5, r3
 8003d9a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d9e:	bf08      	it	eq
 8003da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da4:	4293      	cmp	r3, r2
 8003da6:	bfc4      	itt	gt
 8003da8:	1a9b      	subgt	r3, r3, r2
 8003daa:	18ed      	addgt	r5, r5, r3
 8003dac:	42b5      	cmp	r5, r6
 8003dae:	d11a      	bne.n	8003de6 <_printf_common+0xd2>
 8003db0:	2000      	movs	r0, #0
 8003db2:	e008      	b.n	8003dc6 <_printf_common+0xb2>
 8003db4:	2301      	movs	r3, #1
 8003db6:	4652      	mov	r2, sl
 8003db8:	4641      	mov	r1, r8
 8003dba:	4638      	mov	r0, r7
 8003dbc:	47c8      	blx	r9
 8003dbe:	3001      	adds	r0, #1
 8003dc0:	d103      	bne.n	8003dca <_printf_common+0xb6>
 8003dc2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dca:	3501      	adds	r5, #1
 8003dcc:	e7c1      	b.n	8003d52 <_printf_common+0x3e>
 8003dce:	2030      	movs	r0, #48	@ 0x30
 8003dd0:	18e1      	adds	r1, r4, r3
 8003dd2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ddc:	4422      	add	r2, r4
 8003dde:	3302      	adds	r3, #2
 8003de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de4:	e7c2      	b.n	8003d6c <_printf_common+0x58>
 8003de6:	2301      	movs	r3, #1
 8003de8:	4622      	mov	r2, r4
 8003dea:	4641      	mov	r1, r8
 8003dec:	4638      	mov	r0, r7
 8003dee:	47c8      	blx	r9
 8003df0:	3001      	adds	r0, #1
 8003df2:	d0e6      	beq.n	8003dc2 <_printf_common+0xae>
 8003df4:	3601      	adds	r6, #1
 8003df6:	e7d9      	b.n	8003dac <_printf_common+0x98>

08003df8 <_printf_i>:
 8003df8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	7e0f      	ldrb	r7, [r1, #24]
 8003dfe:	4691      	mov	r9, r2
 8003e00:	2f78      	cmp	r7, #120	@ 0x78
 8003e02:	4680      	mov	r8, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	469a      	mov	sl, r3
 8003e08:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e0a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e0e:	d807      	bhi.n	8003e20 <_printf_i+0x28>
 8003e10:	2f62      	cmp	r7, #98	@ 0x62
 8003e12:	d80a      	bhi.n	8003e2a <_printf_i+0x32>
 8003e14:	2f00      	cmp	r7, #0
 8003e16:	f000 80d1 	beq.w	8003fbc <_printf_i+0x1c4>
 8003e1a:	2f58      	cmp	r7, #88	@ 0x58
 8003e1c:	f000 80b8 	beq.w	8003f90 <_printf_i+0x198>
 8003e20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e24:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e28:	e03a      	b.n	8003ea0 <_printf_i+0xa8>
 8003e2a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e2e:	2b15      	cmp	r3, #21
 8003e30:	d8f6      	bhi.n	8003e20 <_printf_i+0x28>
 8003e32:	a101      	add	r1, pc, #4	@ (adr r1, 8003e38 <_printf_i+0x40>)
 8003e34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e38:	08003e91 	.word	0x08003e91
 8003e3c:	08003ea5 	.word	0x08003ea5
 8003e40:	08003e21 	.word	0x08003e21
 8003e44:	08003e21 	.word	0x08003e21
 8003e48:	08003e21 	.word	0x08003e21
 8003e4c:	08003e21 	.word	0x08003e21
 8003e50:	08003ea5 	.word	0x08003ea5
 8003e54:	08003e21 	.word	0x08003e21
 8003e58:	08003e21 	.word	0x08003e21
 8003e5c:	08003e21 	.word	0x08003e21
 8003e60:	08003e21 	.word	0x08003e21
 8003e64:	08003fa3 	.word	0x08003fa3
 8003e68:	08003ecf 	.word	0x08003ecf
 8003e6c:	08003f5d 	.word	0x08003f5d
 8003e70:	08003e21 	.word	0x08003e21
 8003e74:	08003e21 	.word	0x08003e21
 8003e78:	08003fc5 	.word	0x08003fc5
 8003e7c:	08003e21 	.word	0x08003e21
 8003e80:	08003ecf 	.word	0x08003ecf
 8003e84:	08003e21 	.word	0x08003e21
 8003e88:	08003e21 	.word	0x08003e21
 8003e8c:	08003f65 	.word	0x08003f65
 8003e90:	6833      	ldr	r3, [r6, #0]
 8003e92:	1d1a      	adds	r2, r3, #4
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6032      	str	r2, [r6, #0]
 8003e98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e09c      	b.n	8003fde <_printf_i+0x1e6>
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	6820      	ldr	r0, [r4, #0]
 8003ea8:	1d19      	adds	r1, r3, #4
 8003eaa:	6031      	str	r1, [r6, #0]
 8003eac:	0606      	lsls	r6, r0, #24
 8003eae:	d501      	bpl.n	8003eb4 <_printf_i+0xbc>
 8003eb0:	681d      	ldr	r5, [r3, #0]
 8003eb2:	e003      	b.n	8003ebc <_printf_i+0xc4>
 8003eb4:	0645      	lsls	r5, r0, #25
 8003eb6:	d5fb      	bpl.n	8003eb0 <_printf_i+0xb8>
 8003eb8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ebc:	2d00      	cmp	r5, #0
 8003ebe:	da03      	bge.n	8003ec8 <_printf_i+0xd0>
 8003ec0:	232d      	movs	r3, #45	@ 0x2d
 8003ec2:	426d      	negs	r5, r5
 8003ec4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec8:	230a      	movs	r3, #10
 8003eca:	4858      	ldr	r0, [pc, #352]	@ (800402c <_printf_i+0x234>)
 8003ecc:	e011      	b.n	8003ef2 <_printf_i+0xfa>
 8003ece:	6821      	ldr	r1, [r4, #0]
 8003ed0:	6833      	ldr	r3, [r6, #0]
 8003ed2:	0608      	lsls	r0, r1, #24
 8003ed4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ed8:	d402      	bmi.n	8003ee0 <_printf_i+0xe8>
 8003eda:	0649      	lsls	r1, r1, #25
 8003edc:	bf48      	it	mi
 8003ede:	b2ad      	uxthmi	r5, r5
 8003ee0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ee2:	6033      	str	r3, [r6, #0]
 8003ee4:	bf14      	ite	ne
 8003ee6:	230a      	movne	r3, #10
 8003ee8:	2308      	moveq	r3, #8
 8003eea:	4850      	ldr	r0, [pc, #320]	@ (800402c <_printf_i+0x234>)
 8003eec:	2100      	movs	r1, #0
 8003eee:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ef2:	6866      	ldr	r6, [r4, #4]
 8003ef4:	2e00      	cmp	r6, #0
 8003ef6:	60a6      	str	r6, [r4, #8]
 8003ef8:	db05      	blt.n	8003f06 <_printf_i+0x10e>
 8003efa:	6821      	ldr	r1, [r4, #0]
 8003efc:	432e      	orrs	r6, r5
 8003efe:	f021 0104 	bic.w	r1, r1, #4
 8003f02:	6021      	str	r1, [r4, #0]
 8003f04:	d04b      	beq.n	8003f9e <_printf_i+0x1a6>
 8003f06:	4616      	mov	r6, r2
 8003f08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f10:	5dc7      	ldrb	r7, [r0, r7]
 8003f12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f16:	462f      	mov	r7, r5
 8003f18:	42bb      	cmp	r3, r7
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	d9f4      	bls.n	8003f08 <_printf_i+0x110>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x142>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07df      	lsls	r7, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x142>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6861      	ldr	r1, [r4, #4]
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	@ 0x30
 8003f32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f36:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f3a:	1b92      	subs	r2, r2, r6
 8003f3c:	6122      	str	r2, [r4, #16]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	f7ff fee3 	bl	8003d14 <_printf_common>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d14a      	bne.n	8003fe8 <_printf_i+0x1f0>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2778      	movs	r7, #120	@ 0x78
 8003f66:	4832      	ldr	r0, [pc, #200]	@ (8004030 <_printf_i+0x238>)
 8003f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	061f      	lsls	r7, r3, #24
 8003f72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f76:	d402      	bmi.n	8003f7e <_printf_i+0x186>
 8003f78:	065f      	lsls	r7, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2ad      	uxthmi	r5, r5
 8003f7e:	6031      	str	r1, [r6, #0]
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	bf44      	itt	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6023      	strmi	r3, [r4, #0]
 8003f8a:	b11d      	cbz	r5, 8003f94 <_printf_i+0x19c>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	e7ad      	b.n	8003eec <_printf_i+0xf4>
 8003f90:	4826      	ldr	r0, [pc, #152]	@ (800402c <_printf_i+0x234>)
 8003f92:	e7e9      	b.n	8003f68 <_printf_i+0x170>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e7f6      	b.n	8003f8c <_printf_i+0x194>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	e7bd      	b.n	8003f1e <_printf_i+0x126>
 8003fa2:	6833      	ldr	r3, [r6, #0]
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	6030      	str	r0, [r6, #0]
 8003fac:	062e      	lsls	r6, r5, #24
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0x1be>
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0x1c4>
 8003fb6:	0668      	lsls	r0, r5, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0x1ba>
 8003fba:	8019      	strh	r1, [r3, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4616      	mov	r6, r2
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	e7bc      	b.n	8003f3e <_printf_i+0x146>
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	6032      	str	r2, [r6, #0]
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f859 	bl	8004088 <memchr>
 8003fd6:	b108      	cbz	r0, 8003fdc <_printf_i+0x1e4>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	6060      	str	r0, [r4, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe6:	e7aa      	b.n	8003f3e <_printf_i+0x146>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	47d0      	blx	sl
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0ad      	beq.n	8003f52 <_printf_i+0x15a>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d413      	bmi.n	8004024 <_printf_i+0x22c>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e7a6      	b.n	8003f56 <_printf_i+0x15e>
 8004008:	2301      	movs	r3, #1
 800400a:	4632      	mov	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	4640      	mov	r0, r8
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d09d      	beq.n	8003f52 <_printf_i+0x15a>
 8004016:	3501      	adds	r5, #1
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	9903      	ldr	r1, [sp, #12]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	42ab      	cmp	r3, r5
 8004020:	dcf2      	bgt.n	8004008 <_printf_i+0x210>
 8004022:	e7eb      	b.n	8003ffc <_printf_i+0x204>
 8004024:	2500      	movs	r5, #0
 8004026:	f104 0619 	add.w	r6, r4, #25
 800402a:	e7f5      	b.n	8004018 <_printf_i+0x220>
 800402c:	080041c7 	.word	0x080041c7
 8004030:	080041d8 	.word	0x080041d8

08004034 <memmove>:
 8004034:	4288      	cmp	r0, r1
 8004036:	b510      	push	{r4, lr}
 8004038:	eb01 0402 	add.w	r4, r1, r2
 800403c:	d902      	bls.n	8004044 <memmove+0x10>
 800403e:	4284      	cmp	r4, r0
 8004040:	4623      	mov	r3, r4
 8004042:	d807      	bhi.n	8004054 <memmove+0x20>
 8004044:	1e43      	subs	r3, r0, #1
 8004046:	42a1      	cmp	r1, r4
 8004048:	d008      	beq.n	800405c <memmove+0x28>
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004052:	e7f8      	b.n	8004046 <memmove+0x12>
 8004054:	4601      	mov	r1, r0
 8004056:	4402      	add	r2, r0
 8004058:	428a      	cmp	r2, r1
 800405a:	d100      	bne.n	800405e <memmove+0x2a>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004066:	e7f7      	b.n	8004058 <memmove+0x24>

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	@ (8004084 <_sbrk_r+0x1c>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fd f920 	bl	80012b8 <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	200002d8 	.word	0x200002d8

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <_realloc_r>:
 80040a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a8:	4607      	mov	r7, r0
 80040aa:	4614      	mov	r4, r2
 80040ac:	460d      	mov	r5, r1
 80040ae:	b921      	cbnz	r1, 80040ba <_realloc_r+0x16>
 80040b0:	4611      	mov	r1, r2
 80040b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	f7ff bc49 	b.w	800394c <_malloc_r>
 80040ba:	b92a      	cbnz	r2, 80040c8 <_realloc_r+0x24>
 80040bc:	f7ff fbdc 	bl	8003878 <_free_r>
 80040c0:	4625      	mov	r5, r4
 80040c2:	4628      	mov	r0, r5
 80040c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c8:	f000 f81a 	bl	8004100 <_malloc_usable_size_r>
 80040cc:	4284      	cmp	r4, r0
 80040ce:	4606      	mov	r6, r0
 80040d0:	d802      	bhi.n	80040d8 <_realloc_r+0x34>
 80040d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040d6:	d8f4      	bhi.n	80040c2 <_realloc_r+0x1e>
 80040d8:	4621      	mov	r1, r4
 80040da:	4638      	mov	r0, r7
 80040dc:	f7ff fc36 	bl	800394c <_malloc_r>
 80040e0:	4680      	mov	r8, r0
 80040e2:	b908      	cbnz	r0, 80040e8 <_realloc_r+0x44>
 80040e4:	4645      	mov	r5, r8
 80040e6:	e7ec      	b.n	80040c2 <_realloc_r+0x1e>
 80040e8:	42b4      	cmp	r4, r6
 80040ea:	4622      	mov	r2, r4
 80040ec:	4629      	mov	r1, r5
 80040ee:	bf28      	it	cs
 80040f0:	4632      	movcs	r2, r6
 80040f2:	f7ff fbb3 	bl	800385c <memcpy>
 80040f6:	4629      	mov	r1, r5
 80040f8:	4638      	mov	r0, r7
 80040fa:	f7ff fbbd 	bl	8003878 <_free_r>
 80040fe:	e7f1      	b.n	80040e4 <_realloc_r+0x40>

08004100 <_malloc_usable_size_r>:
 8004100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004104:	1f18      	subs	r0, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbc      	itt	lt
 800410a:	580b      	ldrlt	r3, [r1, r0]
 800410c:	18c0      	addlt	r0, r0, r3
 800410e:	4770      	bx	lr

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
